OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0dev
# options: -q -o ..\build\win64-x64-release-free\2016.5\..\osl\dlSubstance.oso -I../../osl_shaders
surface dlSubstance	%meta{string[1],tags,"surface"} 
param	color	i_color	0.5 0.5 0.5		%meta{string,page,"Main"} %meta{string,label,"Color"} %meta{string,attribute,"color"}  %read{116,266} %write{2147483647,-1}
param	float	roughness	0.300000012		%meta{string,page,"Main"} %meta{string,label,"Roughness"} %meta{float,min,0} %meta{float,max,1}  %read{117,121} %write{2147483647,-1}
param	float	specular_level	0.5		%meta{string,page,"Main"} %meta{string,label,"Specular Level"} %meta{float,min,0} %meta{float,max,1}  %read{124,184} %write{2147483647,-1}
param	float	metallic	0		%meta{string,page,"Main"} %meta{string,label,"Metallic"} %meta{float,min,0} %meta{float,max,1}  %read{318,325} %write{2147483647,-1}
param	float	opacity	1		%meta{string,page,"Main"} %meta{string,label,"Opacity"}  %read{312,327} %write{2147483647,-1}
param	color	emissive	0 0 0		%meta{string,page,"Main"} %meta{string,label,"Emissive"}  %read{119,119} %write{2147483647,-1}
param	float	emissive_intensity	1		%meta{string,page,"Main"} %meta{string,label,"Emissive Intensity"} %meta{float,min,0} %meta{float,slidermin,0} %meta{float,slidermax,5}  %read{119,119} %write{2147483647,-1}
param	color	incandescence_multiplier	1 1 1		%meta{string,widget,"null"} %meta{string,maya_attribute,"*none"}  %read{120,120} %write{2147483647,-1}
param	int	disp_normal_bump_type	0		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Type"} %meta{string,widget,"mapper"} %meta{string,options,"Bump Map:0|Normal Map (DirectX):1|Normal Map (OpenGL):2|Displacement (0.0 centered):3|Displacement (0.5 centered):4|"} %meta{string,niceName,"Bump / Normal / Displacement Map Type"}  %read{13,37} %write{2147483647,-1}
param	color	disp_normal_bump_value	0 0 0		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Value"} %meta{int,skip_init,1} %meta{string,widget,"navigation"} %meta{string,niceName,"Bump / Normal / Displacement Map Value"}  %read{6,33} %write{0,0} %derivs %initexpr
param	float	disp_normal_bump_intensity	1		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Intensity"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,niceName,"Bump / Normal / Displacement Map Intensity"}  %read{9,33} %write{2147483647,-1} %derivs
param	float[2]	uvCoord	0 0		%meta{string,default_connection,"uvCoord"} %meta{int,skip_init,1} %meta{int,hidden,1} %meta{string,label,"UV Coordinates"} %meta{string,widget,"null"}  %read{1,2} %write{2147483647,-1} %derivs
oparam	closure color	outColor			%meta{string,attribute,"outColor"}  %read{335,336} %write{316,335}
global	vector	I	%read{3,3} %write{2147483647,-1}
global	normal	N	%read{0,4} %write{2147483647,-1} %derivs
global	float	u	%read{56,83} %write{2147483647,-1} %derivs
global	float	v	%read{65,92} %write{2147483647,-1} %derivs
global	vector	dPdu	%read{62,86} %write{2147483647,-1}
global	vector	dPdv	%read{71,95} %write{2147483647,-1}
global	closure color	Ci	%read{2147483647,-1} %write{336,336}
local	float	___358_sqrtr	%read{220,283} %write{219,281}
local	float	___359_nplusone	%read{228,290} %write{226,288}
local	float	___359_nminusone	%read{230,292} %write{227,289}
local	float	___359_nr	%read{233,295} %write{231,293}
local	float	___355_rr	%read{213,294} %write{210,272}
local	float	___360_n_r	%read{226,297} %write{224,224}
local	float	___360_n_g	%read{257,297} %write{255,255}
local	float	___360_n_b	%read{288,297} %write{286,286}
local	float	___360_k2_r	%read{298,298} %write{234,234}
local	float	___360_k2_g	%read{298,298} %write{265,265}
local	float	___360_k2_b	%read{298,298} %write{296,296}
local	float	___362_n	%read{149,149} %write{142,144}
local	float	___362_ni	%read{150,150} %write{143,145}
local	float	___362_cos_theta	%read{140,169} %write{139,146}
local	float	___362_cos2_theta	%read{148,173} %write{147,147}
local	float	___362_sin2_theta	%read{152,176} %write{148,148}
local	float	___362_n2	%read{151,155} %write{149,149}
local	float	___362_ni2	%read{152,164} %write{150,150}
local	float	___362_t0	%read{154,163} %write{153,153}
local	float	___362_t1	%read{159,163} %write{158,158}
local	float	___362_a2plusb2	%read{167,173} %write{159,159}
local	float	___362_a2	%read{166,166} %write{162,162}
local	float	___362_b2	%read{2147483647,-1} %write{165,165}
local	float	___362_a	%read{168,168} %write{166,166}
local	float	___362_t2	%read{170,171} %write{167,167}
local	float	___362_t3	%read{170,176} %write{169,169}
local	float	___362_R_s	%read{178,181} %write{172,172}
local	float	___362_t4	%read{177,179} %write{175,175}
local	float	___362_t5	%read{177,179} %write{176,176}
local	float	___362_R_p	%read{181,181} %write{180,180}
local	float	___365_T	%read{133,134} %write{132,132}
local	normal	___369_N_result	%read{29,115} %write{28,110}
local	float	___370_depth	%read{21,23} %write{18,18} %derivs
local	float	___370_offset	%read{25,25} %write{24,24} %derivs
local	point	___370_pb	%read{27,27} %write{26,26} %derivs
local	vector	___369_basisx	%read{97,102} %write{53,100}
local	vector	___369_basisy	%read{52,104} %write{51,75}
local	vector	___369_basisz	%read{50,107} %write{42,42}
local	vector	___369_stangent	%read{46,50} %write{43,43}
local	vector	___374_uorient	%read{97,97} %write{96,96}
local	float	ss	%read{26,91} %write{1,1} %derivs
local	float	tt	%read{26,67} %write{2,2} %derivs
local	vector	In	%read{136,136} %write{3,3}
local	normal	Nn	%read{5,113} %write{4,4}
local	normal	Nn_base	%read{117,300} %write{5,115}
local	color	diffuse_color	%read{311,317} %write{116,311}
local	closure color	c_diffuse	%read{317,317} %write{117,117}
local	closure color	c_incandescence	%read{333,333} %write{118,118}
local	color	incandescence_color	%read{333,333} %write{120,120}
local	float	reflect_roughness	%read{187,300} %write{121,121}
local	closure color	c_dielectric_reflect	%read{322,322} %write{122,187}
local	color	dielectric_fresnel	%read{185,322} %write{123,185}
local	float	___391_reflect_ior	%read{142,187} %write{130,135}
local	closure color	c_metallic_reflect	%read{325,325} %write{188,300}
local	color	___392_metallic_ior	%read{300,300} %write{297,297}
local	color	___392_metallic_complex_ior	%read{300,300} %write{298,298}
local	color	___392_metallic_edge	%read{193,267} %write{192,202}
local	float	transparency	%read{316,331} %write{312,312}
local	closure color	___394_aov_diffuse	%read{329,329} %write{321,321}
local	closure color	___394_aov_reflection	%read{329,329} %write{328,328}
const	int	$const1	0		%read{1,302} %write{2147483647,-1}
const	int	$const2	1		%read{2,304} %write{2147483647,-1}
temp	int	$tmp1	%read{7,7} %write{6,6}
temp	int	$tmp2	%read{8,12} %write{7,11}
temp	int	$tmp3	%read{10,10} %write{9,9}
temp	int	$tmp4	%read{11,11} %write{10,10}
const	int	$const3	2		%read{13,307} %write{2147483647,-1}
temp	int	$tmp5	%read{14,14} %write{13,13}
const	string	$const4	"getNormalFromMap"		%read{15,15} %write{2147483647,-1}
temp	int	$tmp6	%read{17,17} %write{16,16}
temp	float	$tmp7	%read{20,20} %write{19,19} %derivs
temp	float	$tmp8	%read{23,23} %write{20,20} %derivs
temp	float	$tmp9	%read{24,24} %write{21,21} %derivs
const	string	$const5	"clamp"		%read{22,270} %write{2147483647,-1}
temp	float	$tmp10	%read{24,24} %write{23,23} %derivs
const	float	$const6	0.00400000019		%read{25,25} %write{2147483647,-1}
temp	float	$tmp11	%read{26,26} %write{25,25} %derivs
temp	vector	$tmp12	%read{28,28} %write{27,27}
temp	float	$tmp13	%read{30,30} %write{29,29}
temp	int	$tmp14	%read{31,31} %write{30,30}
temp	normal	$tmp15	%read{35,35} %write{34,34}
temp	color	$tmp16	%read{34,34} %write{33,33}
const	color	$const7	0.5 0.5 1		%read{33,33} %write{2147483647,-1}
const	vector	$const8	0.5 0.5 0.5		%read{35,35} %write{2147483647,-1}
temp	normal	$tmp19	%read{36,36} %write{35,35}
temp	int	$tmp20	%read{38,38} %write{37,37}
temp	float	$tmp21	%read{40,40} %write{39,39}
temp	float	$tmp22	%read{41,41} %write{40,40}
const	float	$const10	-1		%read{40,40} %write{2147483647,-1}
temp	int	$tmp23	%read{44,44} %write{43,43}
const	string	$const11	"tangent:st"		%read{43,43} %write{2147483647,-1}
temp	int	$tmp24	%read{45,49} %write{44,48}
temp	int	$tmp25	%read{47,47} %write{46,46}
temp	int	$tmp26	%read{48,48} %write{47,47}
temp	vector	$tmp27	%read{51,51} %write{50,50}
temp	vector	$tmp28	%read{53,53} %write{52,52}
temp	float	$tmp29	%read{62,62} %write{61,61}
const	string	$const12	"Du"		%read{54,78} %write{2147483647,-1}
temp	float	$tmp30	%read{57,57} %write{55,55}
temp	float	$tmp31	%read{57,57} %write{56,56}
temp	float	$tmp32	%read{61,61} %write{57,57}
temp	float	$tmp33	%read{60,60} %write{58,58}
temp	float	$tmp34	%read{60,60} %write{59,59}
temp	float	$tmp35	%read{61,61} %write{60,60}
temp	vector	$tmp36	%read{72,72} %write{62,62}
temp	float	$tmp37	%read{71,71} %write{70,70}
const	string	$const13	"Dv"		%read{63,87} %write{2147483647,-1}
temp	float	$tmp38	%read{66,66} %write{64,64}
temp	float	$tmp39	%read{66,66} %write{65,65}
temp	float	$tmp40	%read{70,70} %write{66,66}
temp	float	$tmp41	%read{69,69} %write{67,67}
temp	float	$tmp42	%read{69,69} %write{68,68}
temp	float	$tmp43	%read{70,70} %write{69,69}
temp	vector	$tmp44	%read{72,72} %write{71,71}
temp	vector	$tmp45	%read{75,75} %write{74,74}
temp	vector	$tmp46	%read{74,74} %write{73,73}
temp	vector	$tmp47	%read{77,77} %write{76,76}
temp	float	$tmp48	%read{86,86} %write{85,85}
temp	float	$tmp49	%read{81,81} %write{79,79}
temp	float	$tmp50	%read{81,81} %write{80,80}
temp	float	$tmp51	%read{85,85} %write{81,81}
temp	float	$tmp52	%read{84,84} %write{82,82}
temp	float	$tmp53	%read{84,84} %write{83,83}
temp	float	$tmp54	%read{85,85} %write{84,84}
temp	vector	$tmp55	%read{96,96} %write{86,86}
temp	float	$tmp56	%read{95,95} %write{94,94}
temp	float	$tmp57	%read{90,90} %write{88,88}
temp	float	$tmp58	%read{90,90} %write{89,89}
temp	float	$tmp59	%read{94,94} %write{90,90}
temp	float	$tmp60	%read{93,93} %write{91,91}
temp	float	$tmp61	%read{93,93} %write{92,92}
temp	float	$tmp62	%read{94,94} %write{93,93}
temp	vector	$tmp63	%read{96,96} %write{95,95}
temp	float	$tmp64	%read{98,98} %write{97,97}
temp	int	$tmp65	%read{99,99} %write{98,98}
temp	normal	$tmp66	%read{110,110} %write{109,109}
temp	float	$tmp67	%read{102,102} %write{101,101}
temp	vector	$tmp68	%read{105,105} %write{102,102}
temp	float	$tmp69	%read{104,104} %write{103,103}
temp	vector	$tmp70	%read{105,105} %write{104,104}
temp	vector	$tmp71	%read{108,108} %write{105,105}
temp	float	$tmp72	%read{107,107} %write{106,106}
temp	vector	$tmp73	%read{108,108} %write{107,107}
temp	vector	$tmp74	%read{109,109} %write{108,108}
const	normal	$const14	0 0 0		%read{111,111} %write{2147483647,-1}
temp	int	$tmp76	%read{112,112} %write{111,111}
const	string	$const15	"oren_nayar"		%read{117,117} %write{2147483647,-1}
const	string	$const16	"emission"		%read{118,118} %write{2147483647,-1}
temp	color	$tmp77	%read{120,120} %write{119,119}
temp	int	$tmp78	%read{125,125} %write{124,124}
const	float	$const17	0.0799999982		%read{126,126} %write{2147483647,-1}
temp	float	$tmp79	%read{128,132} %write{126,126}
const	string	$const18	"EtaFromIntensity"		%read{127,127} %write{2147483647,-1}
temp	int	$tmp80	%read{129,129} %write{128,128}
const	int	$const19	500		%read{130,130} %write{2147483647,-1}
temp	float	$tmp81	%read{135,135} %write{133,133}
const	float	$const20	1		%read{133,323} %write{2147483647,-1}
temp	float	$tmp82	%read{135,135} %write{134,134}
temp	float	$tmp83	%read{183,183} %write{182,182}
const	float	$const21	0		%read{151,300} %write{2147483647,-1}
temp	float	$tmp84	%read{139,139} %write{137,137}
temp	vector	$tmp85	%read{137,137} %write{136,136}
const	string	$const22	"Fresnel_DieletricConductor"		%read{138,138} %write{2147483647,-1}
temp	int	$tmp86	%read{141,141} %write{140,140}
temp	float	$tmp87	%read{153,153} %write{151,151}
temp	float	$tmp88	%read{153,153} %write{152,152}
temp	float	$tmp89	%read{157,157} %write{154,154}
temp	float	$tmp90	%read{156,156} %write{155,155}
const	float	$const24	4		%read{155,155} %write{2147483647,-1}
temp	float	$tmp91	%read{157,157} %write{156,156}
temp	float	$tmp92	%read{158,158} %write{157,157}
temp	float	$tmp93	%read{162,162} %write{160,160}
temp	float	$tmp94	%read{162,162} %write{161,161}
const	float	$const25	2		%read{161,168} %write{2147483647,-1}
temp	float	$tmp95	%read{165,165} %write{163,163}
temp	float	$tmp96	%read{165,165} %write{164,164}
temp	float	$tmp97	%read{169,169} %write{168,168}
temp	float	$tmp98	%read{172,172} %write{170,170}
temp	float	$tmp99	%read{172,172} %write{171,171}
temp	float	$tmp100	%read{175,175} %write{173,173}
temp	float	$tmp101	%read{175,175} %write{174,174}
temp	float	$tmp102	%read{178,178} %write{177,177}
temp	float	$tmp103	%read{180,180} %write{178,178}
temp	float	$tmp104	%read{180,180} %write{179,179}
const	float	$const26	0.5		%read{182,194} %write{2147483647,-1}
temp	float	$tmp105	%read{182,182} %write{181,181}
temp	float	$tmp106	%read{185,185} %write{184,184}
const	float	$const27	0.0500000007		%read{184,184} %write{2147483647,-1}
const	string	$const28	"ggx"		%read{187,300} %write{2147483647,-1}
temp	vector	$tmp107	%read{187,187} %write{186,186}
const	string	$const29	"microfacet"		%read{187,300} %write{2147483647,-1}
temp	int	$tmp108	%read{190,190} %write{189,189}
const	string	$const30	"hsv"		%read{192,202} %write{2147483647,-1}
const	string	$const31	"transformc"		%read{191,191} %write{2147483647,-1}
const	string	$const32	"rgb"		%read{192,202} %write{2147483647,-1}
temp	float	$tmp109	%read{194,194} %write{193,193}
temp	float	$tmp110	%read{195,195} %write{194,194}
temp	float	$tmp111	%read{201,201} %write{200,200}
temp	float	$tmp112	%read{197,197} %write{196,196}
const	float	$const33	1.20000005		%read{197,197} %write{2147483647,-1}
temp	float	$tmp113	%read{199,199} %write{197,197}
temp	float	$tmp114	%read{200,200} %write{199,199}
const	string	$const34	"Gulbrandsen_Mapping"		%read{203,268} %write{2147483647,-1}
temp	float	$tmp115	%read{209,209} %write{204,204}
temp	float	$tmp116	%read{216,217} %write{205,205}
const	float	$const35	0.00100000005		%read{207,269} %write{2147483647,-1}
temp	float	$tmp117	%read{209,209} %write{207,207}
temp	float	$tmp118	%read{210,210} %write{209,209}
const	string	$const36	"get_n"		%read{211,273} %write{2147483647,-1}
temp	float	$tmp119	%read{216,216} %write{215,215}
const	string	$const37	"n_min"		%read{212,274} %write{2147483647,-1}
temp	float	$tmp120	%read{215,215} %write{213,213}
temp	float	$tmp121	%read{215,215} %write{214,214}
temp	float	$tmp122	%read{224,224} %write{216,216}
temp	float	$tmp123	%read{223,223} %write{217,217}
temp	float	$tmp124	%read{223,223} %write{222,222}
const	string	$const38	"n_max"		%read{218,280} %write{2147483647,-1}
temp	float	$tmp125	%read{222,222} %write{220,220}
temp	float	$tmp126	%read{222,222} %write{221,221}
temp	float	$tmp127	%read{224,224} %write{223,223}
temp	float	$tmp128	%read{234,234} %write{233,233}
const	string	$const39	"get_k2"		%read{225,287} %write{2147483647,-1}
temp	float	$tmp129	%read{229,229} %write{228,228}
temp	float	$tmp130	%read{231,231} %write{229,229}
temp	float	$tmp131	%read{231,231} %write{230,230}
temp	float	$tmp132	%read{233,233} %write{232,232}
temp	float	$tmp133	%read{240,240} %write{235,235}
temp	float	$tmp134	%read{247,248} %write{236,236}
temp	float	$tmp135	%read{240,240} %write{238,238}
temp	float	$tmp136	%read{241,241} %write{240,240}
temp	float	$tmp137	%read{247,247} %write{246,246}
temp	float	$tmp138	%read{246,246} %write{244,244}
temp	float	$tmp139	%read{246,246} %write{245,245}
temp	float	$tmp140	%read{255,255} %write{247,247}
temp	float	$tmp141	%read{254,254} %write{248,248}
temp	float	$tmp142	%read{254,254} %write{253,253}
temp	float	$tmp143	%read{253,253} %write{251,251}
temp	float	$tmp144	%read{253,253} %write{252,252}
temp	float	$tmp145	%read{255,255} %write{254,254}
temp	float	$tmp146	%read{265,265} %write{264,264}
temp	float	$tmp147	%read{260,260} %write{259,259}
temp	float	$tmp148	%read{262,262} %write{260,260}
temp	float	$tmp149	%read{262,262} %write{261,261}
temp	float	$tmp150	%read{264,264} %write{263,263}
temp	float	$tmp151	%read{271,271} %write{266,266}
temp	float	$tmp152	%read{278,279} %write{267,267}
temp	float	$tmp153	%read{271,271} %write{269,269}
temp	float	$tmp154	%read{272,272} %write{271,271}
temp	float	$tmp155	%read{278,278} %write{277,277}
temp	float	$tmp156	%read{277,277} %write{275,275}
temp	float	$tmp157	%read{277,277} %write{276,276}
temp	float	$tmp158	%read{286,286} %write{278,278}
temp	float	$tmp159	%read{285,285} %write{279,279}
temp	float	$tmp160	%read{285,285} %write{284,284}
temp	float	$tmp161	%read{284,284} %write{282,282}
temp	float	$tmp162	%read{284,284} %write{283,283}
temp	float	$tmp163	%read{286,286} %write{285,285}
temp	float	$tmp164	%read{296,296} %write{295,295}
temp	float	$tmp165	%read{291,291} %write{290,290}
temp	float	$tmp166	%read{293,293} %write{291,291}
temp	float	$tmp167	%read{293,293} %write{292,292}
temp	float	$tmp168	%read{295,295} %write{294,294}
temp	vector	$tmp169	%read{300,300} %write{299,299}
const	string	$const40	"mediumeta"		%read{300,300} %write{2147483647,-1}
const	string	$const41	"thinfilmeta"		%read{300,300} %write{2147483647,-1}
const	string	$const42	"realeta"		%read{300,300} %write{2147483647,-1}
const	string	$const43	"complexeta"		%read{300,300} %write{2147483647,-1}
const	string	$const44	"thinfilmthickness"		%read{300,300} %write{2147483647,-1}
temp	float	$tmp170	%read{310,310} %write{309,309}
const	string	$const45	"CIEluminance"		%read{301,301} %write{2147483647,-1}
temp	float	$tmp171	%read{303,303} %write{302,302}
const	float	$const46	0.212670997		%read{303,303} %write{2147483647,-1}
temp	float	$tmp172	%read{306,306} %write{303,303}
temp	float	$tmp173	%read{305,305} %write{304,304}
const	float	$const47	0.715160012		%read{305,305} %write{2147483647,-1}
temp	float	$tmp174	%read{306,306} %write{305,305}
temp	float	$tmp175	%read{309,309} %write{306,306}
temp	float	$tmp176	%read{308,308} %write{307,307}
const	float	$const48	0.0721689984		%read{308,308} %write{2147483647,-1}
temp	float	$tmp177	%read{309,309} %write{308,308}
temp	float	$tmp178	%read{311,311} %write{310,310}
temp	int	$tmp179	%read{314,314} %write{313,313}
const	string	$const49	"shadow"		%read{313,313} %write{2147483647,-1}
temp	closure color	$tmp180	%read{316,316} %write{315,315}
const	string	$const50	"transparent"		%read{315,330} %write{2147483647,-1}
const	string	$const51	"diffuse"		%read{321,321} %write{2147483647,-1}
temp	closure color	$tmp181	%read{319,319} %write{317,317}
temp	float	$tmp182	%read{319,319} %write{318,318}
temp	closure color	$tmp183	%read{320,320} %write{319,319}
temp	closure color	$tmp184	%read{321,321} %write{320,320}
const	string	$const52	"outputvariable"		%read{321,334} %write{2147483647,-1}
const	string	$const53	"reflection"		%read{328,328} %write{2147483647,-1}
temp	closure color	$tmp185	%read{324,324} %write{322,322}
temp	float	$tmp186	%read{324,324} %write{323,323}
temp	closure color	$tmp187	%read{326,326} %write{324,324}
temp	closure color	$tmp188	%read{326,326} %write{325,325}
temp	closure color	$tmp189	%read{327,327} %write{326,326}
temp	closure color	$tmp190	%read{328,328} %write{327,327}
temp	closure color	$tmp191	%read{332,332} %write{329,329}
temp	closure color	$tmp192	%read{331,331} %write{330,330}
temp	closure color	$tmp193	%read{332,332} %write{331,331}
temp	closure color	$tmp194	%read{335,335} %write{334,334}
const	string	$const54	"incandescence"		%read{334,334} %write{2147483647,-1}
temp	closure color	$tmp195	%read{334,334} %write{333,333}
code disp_normal_bump_value
# ../../osl_shaders/dlSubstance.osl:69
# 	DECLARE_DISP_NORMALMAP_BUMP
	assign		disp_normal_bump_value N 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{69} %argrw{"wr"}
code ___main___
# ../../osl_shaders/dlSubstance.osl:79
# 	GET_UV(ss,tt)
	aref		ss uvCoord $const1 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{79} %argrw{"wrr"}
	aref		tt uvCoord $const2 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:81
# 	vector In = normalize(I);
	normalize	In I 	%line{81} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:84
# 	normal Nn = normalize(N);
	normalize	Nn N 	%line{84} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:85
# 	normal Nn_base = Nn;
	assign		Nn_base Nn 	%line{85} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:86
# 	COMPUTE_DISP_NORMALMAP_BUMP(Nn_base,ss,tt,Nn)
	isconnected	$tmp1 disp_normal_bump_value 	%line{86} %argrw{"wr"}
	neq		$tmp2 $tmp1 $const1 	%argrw{"wrr"}
	if		$tmp2 12 12 	%argrw{"r"}
	neq		$tmp3 disp_normal_bump_intensity $const1 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
	assign		$tmp2 $tmp4 	%argrw{"wr"}
	if		$tmp2 116 116 	%argrw{"r"}
	le		$tmp5 disp_normal_bump_type $const3 	%argrw{"wrr"}
	if		$tmp5 116 116 	%argrw{"r"}
	functioncall	$const4 116 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:265
# 	if (i_type == 0) // Bump
	eq		$tmp6 disp_normal_bump_type $const1 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{265} %argrw{"wrr"}
	if		$tmp6 33 42 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:267
# 		float depth = abs( i_intensity );
	abs		___370_depth disp_normal_bump_intensity 	%line{267} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:268
# 		float offset = clamp( i_value[0] * i_intensity, -depth, depth );
	compref		$tmp7 disp_normal_bump_value $const1 	%line{268} %argrw{"wrr"}
	mul		$tmp8 $tmp7 disp_normal_bump_intensity 	%argrw{"wrr"}
	neg		$tmp9 ___370_depth 	%argrw{"wr"}
	functioncall	$const5 25 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp10 $tmp8 ___370_depth 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		___370_offset $tmp10 $tmp9 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:269
# 		point pb = point( i_s, i_t, 0.004 * offset );
	mul		$tmp11 $const6 ___370_offset 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{269} %argrw{"wrr"}
	point		___370_pb ss tt $tmp11 	%argrw{"wrrr"}
# W:/r2d2\src\osl_shaders\material_common.h:270
# 		N_result = normalize( calculatenormal( pb ) );
	calculatenormal	$tmp12 ___370_pb 	%line{270} %argrw{"wr"} %argderivs{1}
	normalize	___369_N_result $tmp12 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:275
# 		if ( N_result[2] < 0 )
	compref		$tmp13 ___369_N_result $const3 	%line{275} %argrw{"wrr"}
	lt		$tmp14 $tmp13 $const1 	%argrw{"wrr"}
	if		$tmp14 33 33 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:277
# 			N_result = -N_result;
	neg		___369_N_result ___369_N_result 	%line{277} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:282
# 		N_result = normal(normal(mix(color(0.5,0.5,1),i_value,i_intensity)) - vector(0.5));
	mix		$tmp16 $const7 disp_normal_bump_value disp_normal_bump_intensity 	%line{282} %argrw{"wrrr"}
	assign		$tmp15 $tmp16 	%argrw{"wr"}
	sub		$tmp19 $tmp15 $const8 	%argrw{"wrr"}
	assign		___369_N_result $tmp19 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:284
# 		if (i_type == 1) // DirectX Normal Map
	eq		$tmp20 disp_normal_bump_type $const2 	%line{284} %argrw{"wrr"}
	if		$tmp20 42 42 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:285
# 			N_result[1] *= -1;
	compref		$tmp21 ___369_N_result $const2 	%line{285} %argrw{"wrr"}
	mul		$tmp22 $tmp21 $const10 	%argrw{"wrr"}
	compassign	___369_N_result $const2 $tmp22 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:289
# 	vector basisz = i_N;
	assign		___369_basisz Nn 	%line{289} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:292
# 	if( getattribute("tangent:st", 0, stangent) && stangent != 0 )
	getattribute	$tmp23 $const11 $const1 ___369_stangent 	%line{292} %argrw{"wrrw"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 49 49 	%argrw{"r"}
	neq		$tmp25 ___369_stangent $const1 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	if		$tmp24 54 101 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:294
# 		basisy = normalize( cross( basisz, stangent ) );
	cross		$tmp27 ___369_basisz ___369_stangent 	%line{294} %argrw{"wrr"}
	normalize	___369_basisy $tmp27 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:295
# 		basisx = normalize( cross( basisy, basisz ) );
	cross		$tmp28 ___369_basisy ___369_basisz 	%line{295} %argrw{"wrr"}
	normalize	___369_basisx $tmp28 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	functioncall	$const12 62 	%line{299} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:232
# 	return Dx(a)/Dx(u) + Dy(a)/Dy(u);
	Dx		$tmp30 tt 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{232} %argrw{"wr"} %argderivs{1}
	Dx		$tmp31 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	Dy		$tmp33 tt 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp34 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	add		$tmp29 $tmp32 $tmp35 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	mul		$tmp36 $tmp29 dPdu 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{299} %argrw{"wrr"}
	functioncall	$const13 71 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:244
# 	return Dx(a)/Dx(v) + Dy(a)/Dy(v);
	Dx		$tmp38 tt 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{244} %argrw{"wr"} %argderivs{1}
	Dx		$tmp39 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
	Dy		$tmp41 tt 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp42 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
	add		$tmp37 $tmp40 $tmp43 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	mul		$tmp44 $tmp37 dPdv 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{299} %argrw{"wrr"}
	add		___369_basisy $tmp36 $tmp44 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:300
# 		basisy = normalize( cross(basisz, cross(basisy, basisz)) );
	cross		$tmp46 ___369_basisy ___369_basisz 	%line{300} %argrw{"wrr"}
	cross		$tmp45 ___369_basisz $tmp46 	%argrw{"wrr"}
	normalize	___369_basisy $tmp45 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:301
# 		basisx = normalize( cross( basisy, basisz ) );
	cross		$tmp47 ___369_basisy ___369_basisz 	%line{301} %argrw{"wrr"}
	normalize	___369_basisx $tmp47 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	functioncall	$const12 86 	%line{304} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:232
# 	return Dx(a)/Dx(u) + Dy(a)/Dy(u);
	Dx		$tmp49 ss 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{232} %argrw{"wr"} %argderivs{1}
	Dx		$tmp50 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
	Dy		$tmp52 ss 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp53 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp54 $tmp52 $tmp53 	%argrw{"wrr"}
	add		$tmp48 $tmp51 $tmp54 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	mul		$tmp55 $tmp48 dPdu 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{304} %argrw{"wrr"}
	functioncall	$const13 95 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:244
# 	return Dx(a)/Dx(v) + Dy(a)/Dy(v);
	Dx		$tmp57 ss 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{244} %argrw{"wr"} %argderivs{1}
	Dx		$tmp58 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp59 $tmp57 $tmp58 	%argrw{"wrr"}
	Dy		$tmp60 ss 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp61 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp62 $tmp60 $tmp61 	%argrw{"wrr"}
	add		$tmp56 $tmp59 $tmp62 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	mul		$tmp63 $tmp56 dPdv 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{304} %argrw{"wrr"}
	add		___374_uorient $tmp55 $tmp63 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:305
# 		if( dot( basisx, uorient ) < 0 )
	dot		$tmp64 ___369_basisx ___374_uorient 	%line{305} %argrw{"wrr"}
	lt		$tmp65 $tmp64 $const1 	%argrw{"wrr"}
	if		$tmp65 101 101 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:307
# 			basisx = -basisx;
	neg		___369_basisx ___369_basisx 	%line{307} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:312
# 		N_result[0] * basisx +
	compref		$tmp67 ___369_N_result $const1 	%line{312} %argrw{"wrr"}
	mul		$tmp68 $tmp67 ___369_basisx 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:313
# 		N_result[1] * basisy +
	compref		$tmp69 ___369_N_result $const2 	%line{313} %argrw{"wrr"}
	mul		$tmp70 $tmp69 ___369_basisy 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:312
# 		N_result[0] * basisx +
	add		$tmp71 $tmp68 $tmp70 	%line{312} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:314
# 		N_result[2] * basisz ));
	compref		$tmp72 ___369_N_result $const3 	%line{314} %argrw{"wrr"}
	mul		$tmp73 $tmp72 ___369_basisz 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:313
# 		N_result[1] * basisy +
	add		$tmp74 $tmp71 $tmp73 	%line{313} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:311
# 	N_result = normalize(normal(
	assign		$tmp66 $tmp74 	%line{311} %argrw{"wr"}
	normalize	___369_N_result $tmp66 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:316
# 	if( N_result == normal(0) )
	eq		$tmp76 ___369_N_result $const14 	%line{316} %argrw{"wrr"}
	if		$tmp76 115 115 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:317
# 		return i_N;
	assign		Nn_base Nn 	%line{317} %argrw{"wr"}
	return
# W:/r2d2\src\osl_shaders\material_common.h:319
# 	return N_result;
	assign		Nn_base ___369_N_result 	%line{319} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:90
# 	color diffuse_color = i_color;
	assign		diffuse_color i_color 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{90} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:91
# 	closure color c_diffuse = oren_nayar(Nn_base, roughness);
	closure		c_diffuse $const15 Nn_base roughness 	%line{91} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:95
# 	closure color c_incandescence = emission();
	closure		c_incandescence $const16 	%line{95} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:97
# 		emissive * emissive_intensity * incandescence_multiplier;
	mul		$tmp77 emissive emissive_intensity 	%line{97} %argrw{"wrr"}
	mul		incandescence_color $tmp77 incandescence_multiplier 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:100
# 	float reflect_roughness = roughness * roughness;
	mul		reflect_roughness roughness roughness 	%line{100} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:103
# 	closure color c_dielectric_reflect = 0;
	assign		c_dielectric_reflect $const1 	%line{103} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:104
# 	color dielectric_fresnel = 0;
	assign		dielectric_fresnel $const1 	%line{104} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:106
# 	if( specular_level > 0 )
	gt		$tmp78 specular_level $const1 	%line{106} %argrw{"wrr"}
	if		$tmp78 188 188 	%argrw{"r"}
# ../../osl_shaders/dlSubstance.osl:110
# 		float reflect_ior = EtaFromIntensity( specular_level * 0.08 );
	mul		$tmp79 specular_level $const17 	%line{110} %argrw{"wrr"}
	functioncall	$const18 136 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:171
# 	if( x >= 1 )
	ge		$tmp80 $tmp79 $const2 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{171} %argrw{"wrr"}
	if		$tmp80 132 132 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:174
# 		return 500;
	assign		___391_reflect_ior $const19 	%line{174} %argrw{"wr"}
	return
# W:/r2d2\src\osl_shaders\material_common.h:177
# 	float T = sqrt( x );
	sqrt		___365_T $tmp79 	%line{177} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:178
# 	return (T+1) / (1-T);
	add		$tmp81 ___365_T $const20 	%line{178} %argrw{"wrr"}
	sub		$tmp82 $const20 ___365_T 	%argrw{"wrr"}
	div		___391_reflect_ior $tmp81 $tmp82 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:114
# 				reflect_ior, 0, 1, dot(-In, Nn_base) );
	neg		$tmp85 In 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{114} %argrw{"wr"}
	dot		$tmp84 $tmp85 Nn_base 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:113
# 			Fresnel_DieletricConductor(
	functioncall	$const22 183 	%line{113} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:113
# 	float cos_theta = i_cos_theta;
	assign		___362_cos_theta $tmp84 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:115
# 	if( cos_theta >= 0 )
	ge		$tmp86 ___362_cos_theta $const1 	%line{115} %argrw{"wrr"}
	if		$tmp86 144 147 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:117
# 		n = i_n;
	assign		___362_n ___391_reflect_ior 	%line{117} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:118
# 		ni = i_ni;
	assign		___362_ni $const20 	%line{118} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:122
# 		n = i_ni;
	assign		___362_n $const20 	%line{122} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:123
# 		ni = i_n;
	assign		___362_ni ___391_reflect_ior 	%line{123} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:125
# 		cos_theta = -cos_theta;
	neg		___362_cos_theta ___362_cos_theta 	%line{125} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:128
# 	float cos2_theta = cos_theta * cos_theta;
	mul		___362_cos2_theta ___362_cos_theta ___362_cos_theta 	%line{128} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:129
# 	float sin2_theta = 1 - cos2_theta;
	sub		___362_sin2_theta $const20 ___362_cos2_theta 	%line{129} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:130
# 	float n2 = n * n;
	mul		___362_n2 ___362_n ___362_n 	%line{130} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:131
# 	float ni2 = ni * ni;
	mul		___362_ni2 ___362_ni ___362_ni 	%line{131} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:133
# 	float t0 = n2 - i_k2 - ni2 * sin2_theta;
	sub		$tmp87 ___362_n2 $const21 	%line{133} %argrw{"wrr"}
	mul		$tmp88 ___362_ni2 ___362_sin2_theta 	%argrw{"wrr"}
	sub		___362_t0 $tmp87 $tmp88 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:134
# 	float t1 = sqrt( t0 * t0 + 4 * n2 * i_k2 );
	mul		$tmp89 ___362_t0 ___362_t0 	%line{134} %argrw{"wrr"}
	mul		$tmp90 $const24 ___362_n2 	%argrw{"wrr"}
	mul		$tmp91 $tmp90 $const21 	%argrw{"wrr"}
	add		$tmp92 $tmp89 $tmp91 	%argrw{"wrr"}
	sqrt		___362_t1 $tmp92 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:135
# 	float a2plusb2 = t1 / ni2;
	div		___362_a2plusb2 ___362_t1 ___362_ni2 	%line{135} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:136
# 	float a2 = ( t1 + t0 ) / ( 2 * ni2 );
	add		$tmp93 ___362_t1 ___362_t0 	%line{136} %argrw{"wrr"}
	mul		$tmp94 $const25 ___362_ni2 	%argrw{"wrr"}
	div		___362_a2 $tmp93 $tmp94 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:137
# 	float b2 = ( t1 - t0 ) / ( 2 * ni2 );
	sub		$tmp95 ___362_t1 ___362_t0 	%line{137} %argrw{"wrr"}
	mul		$tmp96 $const25 ___362_ni2 	%argrw{"wrr"}
	div		___362_b2 $tmp95 $tmp96 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:138
# 	float a = sqrt( a2 );
	sqrt		___362_a ___362_a2 	%line{138} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:140
# 	float t2 = a2plusb2 + cos2_theta;
	add		___362_t2 ___362_a2plusb2 ___362_cos2_theta 	%line{140} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:141
# 	float t3 = 2 * a * cos_theta;
	mul		$tmp97 $const25 ___362_a 	%line{141} %argrw{"wrr"}
	mul		___362_t3 $tmp97 ___362_cos_theta 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:142
# 	float R_s = (t2 - t3) / (t2 + t3);
	sub		$tmp98 ___362_t2 ___362_t3 	%line{142} %argrw{"wrr"}
	add		$tmp99 ___362_t2 ___362_t3 	%argrw{"wrr"}
	div		___362_R_s $tmp98 $tmp99 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:144
# 	float t4 = cos2_theta * a2plusb2 + sin2_theta * sin2_theta;
	mul		$tmp100 ___362_cos2_theta ___362_a2plusb2 	%line{144} %argrw{"wrr"}
	mul		$tmp101 ___362_sin2_theta ___362_sin2_theta 	%argrw{"wrr"}
	add		___362_t4 $tmp100 $tmp101 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:145
# 	float t5 = t3 * sin2_theta;
	mul		___362_t5 ___362_t3 ___362_sin2_theta 	%line{145} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:146
# 	float R_p = R_s * (t4 - t5) / (t4 + t5);
	sub		$tmp102 ___362_t4 ___362_t5 	%line{146} %argrw{"wrr"}
	mul		$tmp103 ___362_R_s $tmp102 	%argrw{"wrr"}
	add		$tmp104 ___362_t4 ___362_t5 	%argrw{"wrr"}
	div		___362_R_p $tmp103 $tmp104 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:148
# 	return 0.5 * (R_p + R_s);
	add		$tmp105 ___362_R_p ___362_R_s 	%line{148} %argrw{"wrr"}
	mul		$tmp83 $const26 $tmp105 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:112
# 		dielectric_fresnel =
	assign		dielectric_fresnel $tmp83 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{112} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:119
# 		dielectric_fresnel *= smoothstep(0, 0.05, specular_level);
	smoothstep	$tmp106 $const21 $const27 specular_level 	%line{119} %argrw{"wrrr"}
	mul		dielectric_fresnel dielectric_fresnel $tmp106 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:122
# 			microfacet(
	assign		$tmp107 $const21 	%line{122} %argrw{"wr"}
	closure		c_dielectric_reflect $const29 $const28 Nn_base $tmp107 reflect_roughness reflect_roughness ___391_reflect_ior $const1 	%argrw{"wrrrrrrrr"}
# ../../osl_shaders/dlSubstance.osl:131
# 	closure color c_metallic_reflect = 0;
	assign		c_metallic_reflect $const1 	%line{131} %argrw{"wr"}
# ../../osl_shaders/dlSubstance.osl:133
# 	if( i_color != 0 )
	neq		$tmp108 i_color $const1 	%line{133} %argrw{"wrr"}
	if		$tmp108 301 301 	%argrw{"r"}
# ../../osl_shaders/dlSubstance.osl:137
# 		color metallic_edge = transformc("hsv", i_color);
	functioncall	$const31 193 	%line{137} %argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:326
# color transformc (string to, color c) { return transformc ("rgb", to, c); }
	transformc	___392_metallic_edge $const32 $const30 i_color 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{326} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:139
# 		metallic_edge[1] *= 0.5; // Reduce Saturation 
	compref		$tmp109 ___392_metallic_edge $const2 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{139} %argrw{"wrr"}
	mul		$tmp110 $tmp109 $const26 	%argrw{"wrr"}
	compassign	___392_metallic_edge $const2 $tmp110 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:140
# 		metallic_edge[2] = clamp(metallic_edge[2] * 1.2, 0, 1); // Increase Value
	compref		$tmp112 ___392_metallic_edge $const3 	%line{140} %argrw{"wrr"}
	mul		$tmp113 $tmp112 $const33 	%argrw{"wrr"}
	functioncall	$const5 201 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp114 $tmp113 $const20 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp111 $tmp114 $const21 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:140
# 		metallic_edge[2] = clamp(metallic_edge[2] * 1.2, 0, 1); // Increase Value
	compassign	___392_metallic_edge $const3 $tmp111 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{140} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:141
# 		metallic_edge = transformc("hsv","rgb", metallic_edge);
	transformc	___392_metallic_edge $const30 $const32 ___392_metallic_edge 	%line{141} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:143
# 		Gulbrandsen_Mapping(
	functioncall	$const34 299 	%line{143} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:52
# 	Gulbrandsen_Mapping( i_reflectivity[0], i_gamma[0], n_r, k2_r);
	compref		$tmp115 i_color $const1 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{52} %argrw{"wrr"}
	compref		$tmp116 ___392_metallic_edge $const1 	%argrw{"wrr"}
	functioncall	$const34 235 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:39
# 	float rr = clamp(r, 0, 1 - 1e-3);
	sub		$tmp117 $const20 $const35 	%line{39} %argrw{"wrr"}
	functioncall	$const5 211 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp118 $tmp115 $tmp117 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		___355_rr $tmp118 $const21 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:42
# 	n = get_n(rr,g);
	functioncall	$const36 225 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{42} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	functioncall	$const37 216 	%line{26} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:17
# 			return (1-r)/(1+r);
	sub		$tmp120 $const20 ___355_rr 	%line{17} %argrw{"wrr"}
	add		$tmp121 $const20 ___355_rr 	%argrw{"wrr"}
	div		$tmp119 $tmp120 $tmp121 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp122 $tmp119 $tmp116 	%line{26} %argrw{"wrr"}
	sub		$tmp123 $const20 $tmp116 	%argrw{"wrr"}
	functioncall	$const38 223 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:22
# 			float sqrtr = sqrt( r );
	sqrt		___358_sqrtr ___355_rr 	%line{22} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:23
# 			return (1+sqrtr)/(1-sqrtr);
	add		$tmp125 $const20 ___358_sqrtr 	%line{23} %argrw{"wrr"}
	sub		$tmp126 $const20 ___358_sqrtr 	%argrw{"wrr"}
	div		$tmp124 $tmp125 $tmp126 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp127 $tmp123 $tmp124 	%line{26} %argrw{"wrr"}
	add		___360_n_r $tmp122 $tmp127 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	functioncall	$const39 234 	%line{43} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:32
# 		float nplusone = n+1;
	add		___359_nplusone ___360_n_r $const20 	%line{32} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:33
# 		float nminusone = n-1;
	sub		___359_nminusone ___360_n_r $const20 	%line{33} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:34
# 		float nr = nplusone*nplusone*r - nminusone*nminusone;
	mul		$tmp129 ___359_nplusone ___359_nplusone 	%line{34} %argrw{"wrr"}
	mul		$tmp130 $tmp129 ___355_rr 	%argrw{"wrr"}
	mul		$tmp131 ___359_nminusone ___359_nminusone 	%argrw{"wrr"}
	sub		___359_nr $tmp130 $tmp131 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:35
# 		return nr/(1-r);
	sub		$tmp132 $const20 ___355_rr 	%line{35} %argrw{"wrr"}
	div		$tmp128 ___359_nr $tmp132 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	sqrt		___360_k2_r $tmp128 	%line{43} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:53
# 	Gulbrandsen_Mapping( i_reflectivity[1], i_gamma[1], n_g, k2_g);
	compref		$tmp133 i_color $const2 	%line{53} %argrw{"wrr"}
	compref		$tmp134 ___392_metallic_edge $const2 	%argrw{"wrr"}
	functioncall	$const34 266 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:39
# 	float rr = clamp(r, 0, 1 - 1e-3);
	sub		$tmp135 $const20 $const35 	%line{39} %argrw{"wrr"}
	functioncall	$const5 242 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp136 $tmp133 $tmp135 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		___355_rr $tmp136 $const21 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:42
# 	n = get_n(rr,g);
	functioncall	$const36 256 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{42} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	functioncall	$const37 247 	%line{26} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:17
# 			return (1-r)/(1+r);
	sub		$tmp138 $const20 ___355_rr 	%line{17} %argrw{"wrr"}
	add		$tmp139 $const20 ___355_rr 	%argrw{"wrr"}
	div		$tmp137 $tmp138 $tmp139 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp140 $tmp137 $tmp134 	%line{26} %argrw{"wrr"}
	sub		$tmp141 $const20 $tmp134 	%argrw{"wrr"}
	functioncall	$const38 254 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:22
# 			float sqrtr = sqrt( r );
	sqrt		___358_sqrtr ___355_rr 	%line{22} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:23
# 			return (1+sqrtr)/(1-sqrtr);
	add		$tmp143 $const20 ___358_sqrtr 	%line{23} %argrw{"wrr"}
	sub		$tmp144 $const20 ___358_sqrtr 	%argrw{"wrr"}
	div		$tmp142 $tmp143 $tmp144 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp145 $tmp141 $tmp142 	%line{26} %argrw{"wrr"}
	add		___360_n_g $tmp140 $tmp145 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	functioncall	$const39 265 	%line{43} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:32
# 		float nplusone = n+1;
	add		___359_nplusone ___360_n_g $const20 	%line{32} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:33
# 		float nminusone = n-1;
	sub		___359_nminusone ___360_n_g $const20 	%line{33} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:34
# 		float nr = nplusone*nplusone*r - nminusone*nminusone;
	mul		$tmp147 ___359_nplusone ___359_nplusone 	%line{34} %argrw{"wrr"}
	mul		$tmp148 $tmp147 ___355_rr 	%argrw{"wrr"}
	mul		$tmp149 ___359_nminusone ___359_nminusone 	%argrw{"wrr"}
	sub		___359_nr $tmp148 $tmp149 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:35
# 		return nr/(1-r);
	sub		$tmp150 $const20 ___355_rr 	%line{35} %argrw{"wrr"}
	div		$tmp146 ___359_nr $tmp150 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	sqrt		___360_k2_g $tmp146 	%line{43} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:54
# 	Gulbrandsen_Mapping( i_reflectivity[2], i_gamma[2], n_b, k2_b);
	compref		$tmp151 i_color $const3 	%line{54} %argrw{"wrr"}
	compref		$tmp152 ___392_metallic_edge $const3 	%argrw{"wrr"}
	functioncall	$const34 297 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:39
# 	float rr = clamp(r, 0, 1 - 1e-3);
	sub		$tmp153 $const20 $const35 	%line{39} %argrw{"wrr"}
	functioncall	$const5 273 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp154 $tmp151 $tmp153 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		___355_rr $tmp154 $const21 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:42
# 	n = get_n(rr,g);
	functioncall	$const36 287 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{42} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	functioncall	$const37 278 	%line{26} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:17
# 			return (1-r)/(1+r);
	sub		$tmp156 $const20 ___355_rr 	%line{17} %argrw{"wrr"}
	add		$tmp157 $const20 ___355_rr 	%argrw{"wrr"}
	div		$tmp155 $tmp156 $tmp157 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp158 $tmp155 $tmp152 	%line{26} %argrw{"wrr"}
	sub		$tmp159 $const20 $tmp152 	%argrw{"wrr"}
	functioncall	$const38 285 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:22
# 			float sqrtr = sqrt( r );
	sqrt		___358_sqrtr ___355_rr 	%line{22} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:23
# 			return (1+sqrtr)/(1-sqrtr);
	add		$tmp161 $const20 ___358_sqrtr 	%line{23} %argrw{"wrr"}
	sub		$tmp162 $const20 ___358_sqrtr 	%argrw{"wrr"}
	div		$tmp160 $tmp161 $tmp162 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:26
# 		return n_min(r)*g + (1-g)*n_max(r);
	mul		$tmp163 $tmp159 $tmp160 	%line{26} %argrw{"wrr"}
	add		___360_n_b $tmp158 $tmp163 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	functioncall	$const39 296 	%line{43} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:32
# 		float nplusone = n+1;
	add		___359_nplusone ___360_n_b $const20 	%line{32} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:33
# 		float nminusone = n-1;
	sub		___359_nminusone ___360_n_b $const20 	%line{33} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:34
# 		float nr = nplusone*nplusone*r - nminusone*nminusone;
	mul		$tmp165 ___359_nplusone ___359_nplusone 	%line{34} %argrw{"wrr"}
	mul		$tmp166 $tmp165 ___355_rr 	%argrw{"wrr"}
	mul		$tmp167 ___359_nminusone ___359_nminusone 	%argrw{"wrr"}
	sub		___359_nr $tmp166 $tmp167 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:35
# 		return nr/(1-r);
	sub		$tmp168 $const20 ___355_rr 	%line{35} %argrw{"wrr"}
	div		$tmp164 ___359_nr $tmp168 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:43
# 	k = sqrt(get_k2(rr,n));
	sqrt		___360_k2_b $tmp164 	%line{43} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:56
# 	n = color(n_r, n_g, n_b);
	color		___392_metallic_ior ___360_n_r ___360_n_g ___360_n_b 	%line{56} %argrw{"wrrr"}
# W:/r2d2\src\osl_shaders\material_common.h:57
# 	k2 = color(k2_r, k2_g, k2_b);
	color		___392_metallic_complex_ior ___360_k2_r ___360_k2_g ___360_k2_b 	%line{57} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:150
# 		microfacet(
	assign		$tmp169 $const21 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{150} %argrw{"wr"}
	closure		c_metallic_reflect $const29 $const28 Nn_base $tmp169 reflect_roughness reflect_roughness $const21 $const1 $const40 $const20 $const41 $const20 $const42 ___392_metallic_ior $const43 ___392_metallic_complex_ior $const44 $const21 	%argrw{"wrrrrrrrrrrrrrrrrrr"}
# ../../osl_shaders/dlSubstance.osl:165
# 	diffuse_color *= 1 - CIEluminance(dielectric_fresnel);
	functioncall	$const45 310 	%line{165} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:62
# 		i_color[0] * 0.212671 +
	compref		$tmp171 dielectric_fresnel $const1 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{62} %argrw{"wrr"}
	mul		$tmp172 $tmp171 $const46 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:63
# 		i_color[1] * 0.715160 +
	compref		$tmp173 dielectric_fresnel $const2 	%line{63} %argrw{"wrr"}
	mul		$tmp174 $tmp173 $const47 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:62
# 		i_color[0] * 0.212671 +
	add		$tmp175 $tmp172 $tmp174 	%line{62} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:64
# 		i_color[2] * 0.072169;
	compref		$tmp176 dielectric_fresnel $const3 	%line{64} %argrw{"wrr"}
	mul		$tmp177 $tmp176 $const48 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:63
# 		i_color[1] * 0.715160 +
	add		$tmp170 $tmp175 $tmp177 	%line{63} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:165
# 	diffuse_color *= 1 - CIEluminance(dielectric_fresnel);
	sub		$tmp178 $const20 $tmp170 	%filename{"../../osl_shaders/dlSubstance.osl"} %line{165} %argrw{"wrr"}
	mul		diffuse_color diffuse_color $tmp178 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:167
# 	float transparency = 1 - opacity;
	sub		transparency $const20 opacity 	%line{167} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:169
# 	if( raytype("shadow") )
	raytype		$tmp179 $const49 	%line{169} %argrw{"wr"}
	if		$tmp179 317 333 	%argrw{"r"}
# ../../osl_shaders/dlSubstance.osl:171
# 		outColor = transparency * transparent();
	closure		$tmp180 $const50 	%line{171} %argrw{"wr"}
	mul		outColor $tmp180 transparency 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:178
# 					c_diffuse * diffuse_color * (1 - metallic) * opacity );
	mul		$tmp181 c_diffuse diffuse_color 	%line{178} %argrw{"wrr"}
	sub		$tmp182 $const20 metallic 	%argrw{"wrr"}
	mul		$tmp183 $tmp181 $tmp182 	%argrw{"wrr"}
	mul		$tmp184 $tmp183 opacity 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:176
# 			outputvariable(
	closure		___394_aov_diffuse $const52 $const51 $tmp184 	%line{176} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:184
# 					c_dielectric_reflect * dielectric_fresnel * (1 - metallic)
	mul		$tmp185 c_dielectric_reflect dielectric_fresnel 	%line{184} %argrw{"wrr"}
	sub		$tmp186 $const20 metallic 	%argrw{"wrr"}
	mul		$tmp187 $tmp185 $tmp186 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:185
# 					+ c_metallic_reflect * metallic
	mul		$tmp188 c_metallic_reflect metallic 	%line{185} %argrw{"wrr"}
	add		$tmp189 $tmp187 $tmp188 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:187
# 					* opacity );
	mul		$tmp190 $tmp189 opacity 	%line{187} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:181
# 			outputvariable(
	closure		___394_aov_reflection $const52 $const53 $tmp190 	%line{181} %argrw{"wrrr"}
# ../../osl_shaders/dlSubstance.osl:190
# 			aov_diffuse +
	add		$tmp191 ___394_aov_diffuse ___394_aov_reflection 	%line{190} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:192
# 			transparency * transparent();
	closure		$tmp192 $const50 	%line{192} %argrw{"wr"}
	mul		$tmp193 $tmp192 transparency 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:191
# 			aov_reflection +
	add		outColor $tmp191 $tmp193 	%line{191} %argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:195
# 	outColor += outputvariable( "incandescence", c_incandescence * incandescence_color );
	mul		$tmp195 c_incandescence incandescence_color 	%line{195} %argrw{"wrr"}
	closure		$tmp194 $const52 $const54 $tmp195 	%argrw{"wrrr"}
	add		outColor outColor $tmp194 	%argrw{"wrr"}
# ../../osl_shaders/dlSubstance.osl:197
# 	Ci = outColor;
	assign		Ci outColor 	%line{197} %argrw{"wr"}
	end
