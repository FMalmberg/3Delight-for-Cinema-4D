OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0dev
# options: -q -o ..\build\win64-x64-release-free\2016.5\..\osl\dlSkin.oso -I../../osl_shaders
surface dlSkin	%meta{string[1],tags,"surface"} %meta{string,maya_classification,"surface"} %meta{string,niceName,"Skin"} %meta{int,maya_generateAETemplate,0} 
param	color	skin_color	0.787999988 0.597000003 0.490999997		%meta{string,label,"Color"} %meta{string,page,"Skin"} %meta{string,attribute,"color"}  %read{119,123} %write{2147483647,-1}
param	float	roughness	0.300000012		%meta{string,page,"Skin"} %meta{string,label,"Roughness"} %meta{float,min,0} %meta{float,max,1}  %read{128,211} %write{2147483647,-1}
param	float	specular_level	0.5		%meta{string,page,"Skin"} %meta{string,label,"Specular Level"} %meta{float,min,0} %meta{float,slidermin,0} %meta{float,slidermax,1}  %read{142,207} %write{2147483647,-1}
param	color	sss_color	0.96420002 0.338800013 0.216000006		%meta{string,label,"Color"} %meta{string,page,"Subsurface"} %meta{string,niceName,"SSS Color"}  %read{135,135} %write{2147483647,-1}
param	float	sss_scale	0.5		%meta{string,label,"Scale"} %meta{string,page,"Subsurface"} %meta{float,slidermin,0} %meta{float,slidermax,2} %meta{string,niceName,"SSS Scale"}  %read{135,135} %write{2147483647,-1}
param	float	sss_ior	1.29999995		%meta{string,label,"IOR"} %meta{string,page,"Subsurface"} %meta{float,slidermin,1} %meta{float,slidermax,2} %meta{string,niceName,"SSS IOR"}  %read{139,139} %write{2147483647,-1}
param	int	disp_normal_bump_type	0		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Type"} %meta{string,widget,"mapper"} %meta{string,options,"Bump Map:0|Normal Map (DirectX):1|Normal Map (OpenGL):2|Displacement (0.0 centered):3|Displacement (0.5 centered):4|"} %meta{string,niceName,"Bump / Normal / Displacement Map Type"}  %read{13,37} %write{2147483647,-1}
param	color	disp_normal_bump_value	0 0 0		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Value"} %meta{int,skip_init,1} %meta{string,widget,"navigation"} %meta{string,niceName,"Bump / Normal / Displacement Map Value"}  %read{6,33} %write{0,0} %derivs %initexpr
param	float	disp_normal_bump_intensity	1		%meta{string,page,"Bump / Normal / Displacement Map"} %meta{string,label,"Intensity"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,niceName,"Bump / Normal / Displacement Map Intensity"}  %read{9,33} %write{2147483647,-1} %derivs
param	float[2]	uvCoord	0 0		%meta{string,default_connection,"uvCoord"} %meta{int,skip_init,1} %meta{int,hidden,1} %meta{string,label,"UV Coordinates"} %meta{string,widget,"null"}  %read{1,2} %write{2147483647,-1} %derivs
oparam	closure color	outColor			%read{229,229} %write{228,228}
global	vector	I	%read{116,116} %write{2147483647,-1}
global	normal	N	%read{0,4} %write{2147483647,-1} %derivs
global	float	u	%read{56,83} %write{2147483647,-1} %derivs
global	float	v	%read{65,92} %write{2147483647,-1} %derivs
global	vector	dPdu	%read{62,86} %write{2147483647,-1}
global	vector	dPdv	%read{71,95} %write{2147483647,-1}
global	closure color	Ci	%read{2147483647,-1} %write{229,229}
local	float	___362_n	%read{172,172} %write{165,167}
local	float	___362_ni	%read{173,173} %write{166,168}
local	float	___362_cos_theta	%read{163,192} %write{162,169}
local	float	___362_cos2_theta	%read{171,196} %write{170,170}
local	float	___362_sin2_theta	%read{175,199} %write{171,171}
local	float	___362_n2	%read{174,178} %write{172,172}
local	float	___362_ni2	%read{175,187} %write{173,173}
local	float	___362_t0	%read{177,186} %write{176,176}
local	float	___362_t1	%read{182,186} %write{181,181}
local	float	___362_a2plusb2	%read{190,196} %write{182,182}
local	float	___362_a2	%read{189,189} %write{185,185}
local	float	___362_b2	%read{2147483647,-1} %write{188,188}
local	float	___362_a	%read{191,191} %write{189,189}
local	float	___362_t2	%read{193,194} %write{190,190}
local	float	___362_t3	%read{193,199} %write{192,192}
local	float	___362_R_s	%read{201,204} %write{195,195}
local	float	___362_t4	%read{200,202} %write{198,198}
local	float	___362_t5	%read{200,202} %write{199,199}
local	float	___362_R_p	%read{204,204} %write{203,203}
local	float	___365_T	%read{156,157} %write{155,155}
local	normal	___369_N_result	%read{29,115} %write{28,110}
local	float	___370_depth	%read{21,23} %write{18,18} %derivs
local	float	___370_offset	%read{25,25} %write{24,24} %derivs
local	point	___370_pb	%read{27,27} %write{26,26} %derivs
local	vector	___369_basisx	%read{97,102} %write{53,100}
local	vector	___369_basisy	%read{52,104} %write{51,75}
local	vector	___369_basisz	%read{50,107} %write{42,42}
local	vector	___369_stangent	%read{46,50} %write{43,43}
local	vector	___374_uorient	%read{97,97} %write{96,96}
local	float	ss	%read{26,91} %write{1,1} %derivs
local	float	tt	%read{26,67} %write{2,2} %derivs
local	float[52]	diffuse_remap_data	%read{120,124} %write{3,3}
local	normal	Nn	%read{5,113} %write{4,4}
local	normal	Nn_base	%read{128,212} %write{5,115}
local	vector	In	%read{159,159} %write{116,116}
local	float	__is_subsurface_ray	%read{126,145} %write{118,118}
local	color	diffuse_color	%read{132,224} %write{125,223}
local	closure color	c_diffuse	%read{224,224} %write{128,139}
local	color	___392_sss_skin_color	%read{139,139} %write{133,133}
local	color	___392_mfp	%read{138,139} %write{135,138}
local	closure color	c_reflect	%read{226,226} %write{140,212}
local	color	_reflect_color	%read{208,226} %write{141,208}
local	float	___393_reflect_ior	%read{165,212} %write{153,158}
local	closure color	aov_diffuse	%read{228,228} %write{225,225}
local	closure color	aov_reflection	%read{228,228} %write{227,227}
const	int	$const1	0		%read{1,214} %write{2147483647,-1}
const	int	$const2	1		%read{2,216} %write{2147483647,-1}
const	float[52]	$const3	0 0 0.128214002 0.179756999 0.220019996 0.254505992 0.285371006 0.313607991 0.339850992 0.364418 0.387683988 0.409830987 0.430963993 0.451258987 0.470802993 0.489683002 0.507945001 0.525668025 0.54290998 0.559711993 0.576068997 0.592060983 0.607576013 0.623010993 0.638032973 0.652755976 0.667244017 0.681446016 0.695442021 0.709253013 0.722838998 0.736272991 0.749536991 0.762665987 0.775646985 0.788551986 0.801343024 0.814056993 0.827273011 0.840550005 0.853480995 0.86639601 0.880056977 0.891873002 0.903957009 0.919215024 0.932354987 0.94323498 0.951856017 0.956394017 0.956993997 0.956993997 		%read{3,3} %write{2147483647,-1}
temp	int	$tmp1	%read{7,7} %write{6,6}
temp	int	$tmp2	%read{8,12} %write{7,11}
temp	int	$tmp3	%read{10,10} %write{9,9}
temp	int	$tmp4	%read{11,11} %write{10,10}
const	int	$const4	2		%read{13,219} %write{2147483647,-1}
temp	int	$tmp5	%read{14,14} %write{13,13}
const	string	$const5	"getNormalFromMap"		%read{15,15} %write{2147483647,-1}
temp	int	$tmp6	%read{17,17} %write{16,16}
temp	float	$tmp7	%read{20,20} %write{19,19} %derivs
temp	float	$tmp8	%read{23,23} %write{20,20} %derivs
temp	float	$tmp9	%read{24,24} %write{21,21} %derivs
const	string	$const6	"clamp"		%read{22,131} %write{2147483647,-1}
temp	float	$tmp10	%read{24,24} %write{23,23} %derivs
const	float	$const7	0.00400000019		%read{25,25} %write{2147483647,-1}
temp	float	$tmp11	%read{26,26} %write{25,25} %derivs
temp	vector	$tmp12	%read{28,28} %write{27,27}
temp	float	$tmp13	%read{30,30} %write{29,29}
temp	int	$tmp14	%read{31,31} %write{30,30}
temp	normal	$tmp15	%read{35,35} %write{34,34}
temp	color	$tmp16	%read{34,34} %write{33,33}
const	color	$const8	0.5 0.5 1		%read{33,33} %write{2147483647,-1}
const	vector	$const9	0.5 0.5 0.5		%read{35,35} %write{2147483647,-1}
temp	normal	$tmp19	%read{36,36} %write{35,35}
temp	int	$tmp20	%read{38,38} %write{37,37}
temp	float	$tmp21	%read{40,40} %write{39,39}
temp	float	$tmp22	%read{41,41} %write{40,40}
const	float	$const11	-1		%read{40,40} %write{2147483647,-1}
temp	int	$tmp23	%read{44,44} %write{43,43}
const	string	$const12	"tangent:st"		%read{43,43} %write{2147483647,-1}
temp	int	$tmp24	%read{45,49} %write{44,48}
temp	int	$tmp25	%read{47,47} %write{46,46}
temp	int	$tmp26	%read{48,48} %write{47,47}
temp	vector	$tmp27	%read{51,51} %write{50,50}
temp	vector	$tmp28	%read{53,53} %write{52,52}
temp	float	$tmp29	%read{62,62} %write{61,61}
const	string	$const13	"Du"		%read{54,78} %write{2147483647,-1}
temp	float	$tmp30	%read{57,57} %write{55,55}
temp	float	$tmp31	%read{57,57} %write{56,56}
temp	float	$tmp32	%read{61,61} %write{57,57}
temp	float	$tmp33	%read{60,60} %write{58,58}
temp	float	$tmp34	%read{60,60} %write{59,59}
temp	float	$tmp35	%read{61,61} %write{60,60}
temp	vector	$tmp36	%read{72,72} %write{62,62}
temp	float	$tmp37	%read{71,71} %write{70,70}
const	string	$const14	"Dv"		%read{63,87} %write{2147483647,-1}
temp	float	$tmp38	%read{66,66} %write{64,64}
temp	float	$tmp39	%read{66,66} %write{65,65}
temp	float	$tmp40	%read{70,70} %write{66,66}
temp	float	$tmp41	%read{69,69} %write{67,67}
temp	float	$tmp42	%read{69,69} %write{68,68}
temp	float	$tmp43	%read{70,70} %write{69,69}
temp	vector	$tmp44	%read{72,72} %write{71,71}
temp	vector	$tmp45	%read{75,75} %write{74,74}
temp	vector	$tmp46	%read{74,74} %write{73,73}
temp	vector	$tmp47	%read{77,77} %write{76,76}
temp	float	$tmp48	%read{86,86} %write{85,85}
temp	float	$tmp49	%read{81,81} %write{79,79}
temp	float	$tmp50	%read{81,81} %write{80,80}
temp	float	$tmp51	%read{85,85} %write{81,81}
temp	float	$tmp52	%read{84,84} %write{82,82}
temp	float	$tmp53	%read{84,84} %write{83,83}
temp	float	$tmp54	%read{85,85} %write{84,84}
temp	vector	$tmp55	%read{96,96} %write{86,86}
temp	float	$tmp56	%read{95,95} %write{94,94}
temp	float	$tmp57	%read{90,90} %write{88,88}
temp	float	$tmp58	%read{90,90} %write{89,89}
temp	float	$tmp59	%read{94,94} %write{90,90}
temp	float	$tmp60	%read{93,93} %write{91,91}
temp	float	$tmp61	%read{93,93} %write{92,92}
temp	float	$tmp62	%read{94,94} %write{93,93}
temp	vector	$tmp63	%read{96,96} %write{95,95}
temp	float	$tmp64	%read{98,98} %write{97,97}
temp	int	$tmp65	%read{99,99} %write{98,98}
temp	normal	$tmp66	%read{110,110} %write{109,109}
temp	float	$tmp67	%read{102,102} %write{101,101}
temp	vector	$tmp68	%read{105,105} %write{102,102}
temp	float	$tmp69	%read{104,104} %write{103,103}
temp	vector	$tmp70	%read{105,105} %write{104,104}
temp	vector	$tmp71	%read{108,108} %write{105,105}
temp	float	$tmp72	%read{107,107} %write{106,106}
temp	vector	$tmp73	%read{108,108} %write{107,107}
temp	vector	$tmp74	%read{109,109} %write{108,108}
const	normal	$const15	0 0 0		%read{111,111} %write{2147483647,-1}
temp	int	$tmp76	%read{112,112} %write{111,111}
temp	int	$tmp77	%read{118,118} %write{117,117}
const	string	$const16	"subsurface"		%read{117,225} %write{2147483647,-1}
temp	float	$tmp78	%read{125,125} %write{120,120}
const	string	$const17	"catmull-rom"		%read{120,124} %write{2147483647,-1}
temp	float	$tmp79	%read{120,120} %write{119,119}
temp	float	$tmp80	%read{125,125} %write{122,122}
temp	float	$tmp81	%read{122,122} %write{121,121}
temp	float	$tmp82	%read{125,125} %write{124,124}
temp	float	$tmp83	%read{124,124} %write{123,123}
temp	int	$tmp84	%read{127,127} %write{126,126}
const	string	$const18	"oren_nayar"		%read{128,128} %write{2147483647,-1}
const	float	$const19	0.00999999978		%read{129,129} %write{2147483647,-1}
temp	color	$tmp85	%read{133,133} %write{129,129}
const	float	$const20	0.949999988		%read{130,130} %write{2147483647,-1}
temp	color	$tmp86	%read{132,132} %write{130,130}
temp	color	$tmp87	%read{133,133} %write{132,132}
const	float	$const22	9.99999997e-07		%read{136,136} %write{2147483647,-1}
temp	float	$tmp88	%read{137,137} %write{136,136}
const	float	$const23	5		%read{136,136} %write{2147483647,-1}
temp	color	$tmp89	%read{138,138} %write{137,137}
const	float	$const24	0		%read{139,209} %write{2147483647,-1}
temp	int	$tmp90	%read{143,143} %write{142,142}
temp	int	$tmp91	%read{144,148} %write{143,147}
temp	int	$tmp92	%read{146,146} %write{145,145}
temp	int	$tmp93	%read{147,147} %write{146,146}
const	float	$const25	0.0799999982		%read{149,149} %write{2147483647,-1}
temp	float	$tmp94	%read{151,155} %write{149,149}
const	string	$const26	"EtaFromIntensity"		%read{150,150} %write{2147483647,-1}
temp	int	$tmp95	%read{152,152} %write{151,151}
const	int	$const27	500		%read{153,153} %write{2147483647,-1}
temp	float	$tmp96	%read{158,158} %write{156,156}
const	float	$const28	1		%read{156,222} %write{2147483647,-1}
temp	float	$tmp97	%read{158,158} %write{157,157}
temp	float	$tmp98	%read{206,206} %write{205,205}
temp	float	$tmp99	%read{162,162} %write{160,160}
temp	vector	$tmp100	%read{160,160} %write{159,159}
const	string	$const29	"Fresnel_DieletricConductor"		%read{161,161} %write{2147483647,-1}
temp	int	$tmp101	%read{164,164} %write{163,163}
temp	float	$tmp102	%read{176,176} %write{174,174}
temp	float	$tmp103	%read{176,176} %write{175,175}
temp	float	$tmp104	%read{180,180} %write{177,177}
temp	float	$tmp105	%read{179,179} %write{178,178}
const	float	$const31	4		%read{178,178} %write{2147483647,-1}
temp	float	$tmp106	%read{180,180} %write{179,179}
temp	float	$tmp107	%read{181,181} %write{180,180}
temp	float	$tmp108	%read{185,185} %write{183,183}
temp	float	$tmp109	%read{185,185} %write{184,184}
const	float	$const32	2		%read{184,191} %write{2147483647,-1}
temp	float	$tmp110	%read{188,188} %write{186,186}
temp	float	$tmp111	%read{188,188} %write{187,187}
temp	float	$tmp112	%read{192,192} %write{191,191}
temp	float	$tmp113	%read{195,195} %write{193,193}
temp	float	$tmp114	%read{195,195} %write{194,194}
temp	float	$tmp115	%read{198,198} %write{196,196}
temp	float	$tmp116	%read{198,198} %write{197,197}
temp	float	$tmp117	%read{201,201} %write{200,200}
temp	float	$tmp118	%read{203,203} %write{201,201}
temp	float	$tmp119	%read{203,203} %write{202,202}
const	float	$const33	0.5		%read{205,205} %write{2147483647,-1}
temp	float	$tmp120	%read{205,205} %write{204,204}
temp	float	$tmp121	%read{208,208} %write{207,207}
const	float	$const34	0.0500000007		%read{207,207} %write{2147483647,-1}
const	string	$const35	"ggx"		%read{212,212} %write{2147483647,-1}
temp	vector	$tmp122	%read{212,212} %write{209,209}
temp	float	$tmp123	%read{212,212} %write{210,210}
temp	float	$tmp124	%read{212,212} %write{211,211}
const	string	$const36	"microfacet"		%read{212,212} %write{2147483647,-1}
temp	float	$tmp125	%read{222,222} %write{221,221}
const	string	$const37	"CIEluminance"		%read{213,213} %write{2147483647,-1}
temp	float	$tmp126	%read{215,215} %write{214,214}
const	float	$const38	0.212670997		%read{215,215} %write{2147483647,-1}
temp	float	$tmp127	%read{218,218} %write{215,215}
temp	float	$tmp128	%read{217,217} %write{216,216}
const	float	$const39	0.715160012		%read{217,217} %write{2147483647,-1}
temp	float	$tmp129	%read{218,218} %write{217,217}
temp	float	$tmp130	%read{221,221} %write{218,218}
temp	float	$tmp131	%read{220,220} %write{219,219}
const	float	$const40	0.0721689984		%read{220,220} %write{2147483647,-1}
temp	float	$tmp132	%read{221,221} %write{220,220}
temp	float	$tmp133	%read{223,223} %write{222,222}
temp	closure color	$tmp134	%read{225,225} %write{224,224}
const	string	$const41	"outputvariable"		%read{225,227} %write{2147483647,-1}
const	string	$const42	"reflection"		%read{227,227} %write{2147483647,-1}
temp	closure color	$tmp135	%read{227,227} %write{226,226}
code disp_normal_bump_value
# ../../osl_shaders/dlSkin.osl:67
# 		DECLARE_DISP_NORMALMAP_BUMP
	assign		disp_normal_bump_value N 	%filename{"../../osl_shaders/dlSkin.osl"} %line{67} %argrw{"wr"}
code ___main___
# ../../osl_shaders/dlSkin.osl:74
# 	GET_UV(ss,tt)
	aref		ss uvCoord $const1 	%filename{"../../osl_shaders/dlSkin.osl"} %line{74} %argrw{"wrr"}
	aref		tt uvCoord $const2 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:77
# 	float diffuse_remap_data[52] = {
	assign		diffuse_remap_data $const3 	%line{77} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:92
# 	normal Nn = normalize(N);
	normalize	Nn N 	%line{92} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:93
# 	normal Nn_base = Nn;
	assign		Nn_base Nn 	%line{93} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:94
# 	COMPUTE_DISP_NORMALMAP_BUMP(Nn_base,ss,tt,Nn)
	isconnected	$tmp1 disp_normal_bump_value 	%line{94} %argrw{"wr"}
	neq		$tmp2 $tmp1 $const1 	%argrw{"wrr"}
	if		$tmp2 12 12 	%argrw{"r"}
	neq		$tmp3 disp_normal_bump_intensity $const1 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
	assign		$tmp2 $tmp4 	%argrw{"wr"}
	if		$tmp2 116 116 	%argrw{"r"}
	le		$tmp5 disp_normal_bump_type $const4 	%argrw{"wrr"}
	if		$tmp5 116 116 	%argrw{"r"}
	functioncall	$const5 116 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:265
# 	if (i_type == 0) // Bump
	eq		$tmp6 disp_normal_bump_type $const1 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{265} %argrw{"wrr"}
	if		$tmp6 33 42 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:267
# 		float depth = abs( i_intensity );
	abs		___370_depth disp_normal_bump_intensity 	%line{267} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:268
# 		float offset = clamp( i_value[0] * i_intensity, -depth, depth );
	compref		$tmp7 disp_normal_bump_value $const1 	%line{268} %argrw{"wrr"}
	mul		$tmp8 $tmp7 disp_normal_bump_intensity 	%argrw{"wrr"}
	neg		$tmp9 ___370_depth 	%argrw{"wr"}
	functioncall	$const6 25 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp10 $tmp8 ___370_depth 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		___370_offset $tmp10 $tmp9 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:269
# 		point pb = point( i_s, i_t, 0.004 * offset );
	mul		$tmp11 $const7 ___370_offset 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{269} %argrw{"wrr"}
	point		___370_pb ss tt $tmp11 	%argrw{"wrrr"}
# W:/r2d2\src\osl_shaders\material_common.h:270
# 		N_result = normalize( calculatenormal( pb ) );
	calculatenormal	$tmp12 ___370_pb 	%line{270} %argrw{"wr"} %argderivs{1}
	normalize	___369_N_result $tmp12 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:275
# 		if ( N_result[2] < 0 )
	compref		$tmp13 ___369_N_result $const4 	%line{275} %argrw{"wrr"}
	lt		$tmp14 $tmp13 $const1 	%argrw{"wrr"}
	if		$tmp14 33 33 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:277
# 			N_result = -N_result;
	neg		___369_N_result ___369_N_result 	%line{277} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:282
# 		N_result = normal(normal(mix(color(0.5,0.5,1),i_value,i_intensity)) - vector(0.5));
	mix		$tmp16 $const8 disp_normal_bump_value disp_normal_bump_intensity 	%line{282} %argrw{"wrrr"}
	assign		$tmp15 $tmp16 	%argrw{"wr"}
	sub		$tmp19 $tmp15 $const9 	%argrw{"wrr"}
	assign		___369_N_result $tmp19 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:284
# 		if (i_type == 1) // DirectX Normal Map
	eq		$tmp20 disp_normal_bump_type $const2 	%line{284} %argrw{"wrr"}
	if		$tmp20 42 42 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:285
# 			N_result[1] *= -1;
	compref		$tmp21 ___369_N_result $const2 	%line{285} %argrw{"wrr"}
	mul		$tmp22 $tmp21 $const11 	%argrw{"wrr"}
	compassign	___369_N_result $const2 $tmp22 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:289
# 	vector basisz = i_N;
	assign		___369_basisz Nn 	%line{289} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:292
# 	if( getattribute("tangent:st", 0, stangent) && stangent != 0 )
	getattribute	$tmp23 $const12 $const1 ___369_stangent 	%line{292} %argrw{"wrrw"}
	neq		$tmp24 $tmp23 $const1 	%argrw{"wrr"}
	if		$tmp24 49 49 	%argrw{"r"}
	neq		$tmp25 ___369_stangent $const1 	%argrw{"wrr"}
	neq		$tmp26 $tmp25 $const1 	%argrw{"wrr"}
	assign		$tmp24 $tmp26 	%argrw{"wr"}
	if		$tmp24 54 101 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:294
# 		basisy = normalize( cross( basisz, stangent ) );
	cross		$tmp27 ___369_basisz ___369_stangent 	%line{294} %argrw{"wrr"}
	normalize	___369_basisy $tmp27 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:295
# 		basisx = normalize( cross( basisy, basisz ) );
	cross		$tmp28 ___369_basisy ___369_basisz 	%line{295} %argrw{"wrr"}
	normalize	___369_basisx $tmp28 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	functioncall	$const13 62 	%line{299} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:232
# 	return Dx(a)/Dx(u) + Dy(a)/Dy(u);
	Dx		$tmp30 tt 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{232} %argrw{"wr"} %argderivs{1}
	Dx		$tmp31 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
	Dy		$tmp33 tt 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp34 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp35 $tmp33 $tmp34 	%argrw{"wrr"}
	add		$tmp29 $tmp32 $tmp35 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	mul		$tmp36 $tmp29 dPdu 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{299} %argrw{"wrr"}
	functioncall	$const14 71 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:244
# 	return Dx(a)/Dx(v) + Dy(a)/Dy(v);
	Dx		$tmp38 tt 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{244} %argrw{"wr"} %argderivs{1}
	Dx		$tmp39 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
	Dy		$tmp41 tt 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp42 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
	add		$tmp37 $tmp40 $tmp43 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:299
# 		basisy = Du(i_t) * dPdu + Dv(i_t) * dPdv;
	mul		$tmp44 $tmp37 dPdv 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{299} %argrw{"wrr"}
	add		___369_basisy $tmp36 $tmp44 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:300
# 		basisy = normalize( cross(basisz, cross(basisy, basisz)) );
	cross		$tmp46 ___369_basisy ___369_basisz 	%line{300} %argrw{"wrr"}
	cross		$tmp45 ___369_basisz $tmp46 	%argrw{"wrr"}
	normalize	___369_basisy $tmp45 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:301
# 		basisx = normalize( cross( basisy, basisz ) );
	cross		$tmp47 ___369_basisy ___369_basisz 	%line{301} %argrw{"wrr"}
	normalize	___369_basisx $tmp47 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	functioncall	$const13 86 	%line{304} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:232
# 	return Dx(a)/Dx(u) + Dy(a)/Dy(u);
	Dx		$tmp49 ss 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{232} %argrw{"wr"} %argderivs{1}
	Dx		$tmp50 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp51 $tmp49 $tmp50 	%argrw{"wrr"}
	Dy		$tmp52 ss 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp53 u 	%argrw{"wr"} %argderivs{1}
	div		$tmp54 $tmp52 $tmp53 	%argrw{"wrr"}
	add		$tmp48 $tmp51 $tmp54 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	mul		$tmp55 $tmp48 dPdu 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{304} %argrw{"wrr"}
	functioncall	$const14 95 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:244
# 	return Dx(a)/Dx(v) + Dy(a)/Dy(v);
	Dx		$tmp57 ss 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{244} %argrw{"wr"} %argderivs{1}
	Dx		$tmp58 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp59 $tmp57 $tmp58 	%argrw{"wrr"}
	Dy		$tmp60 ss 	%argrw{"wr"} %argderivs{1}
	Dy		$tmp61 v 	%argrw{"wr"} %argderivs{1}
	div		$tmp62 $tmp60 $tmp61 	%argrw{"wrr"}
	add		$tmp56 $tmp59 $tmp62 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:304
# 		vector uorient = Du(i_s) * dPdu + Dv(i_s) * dPdv;
	mul		$tmp63 $tmp56 dPdv 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{304} %argrw{"wrr"}
	add		___374_uorient $tmp55 $tmp63 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:305
# 		if( dot( basisx, uorient ) < 0 )
	dot		$tmp64 ___369_basisx ___374_uorient 	%line{305} %argrw{"wrr"}
	lt		$tmp65 $tmp64 $const1 	%argrw{"wrr"}
	if		$tmp65 101 101 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:307
# 			basisx = -basisx;
	neg		___369_basisx ___369_basisx 	%line{307} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:312
# 		N_result[0] * basisx +
	compref		$tmp67 ___369_N_result $const1 	%line{312} %argrw{"wrr"}
	mul		$tmp68 $tmp67 ___369_basisx 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:313
# 		N_result[1] * basisy +
	compref		$tmp69 ___369_N_result $const2 	%line{313} %argrw{"wrr"}
	mul		$tmp70 $tmp69 ___369_basisy 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:312
# 		N_result[0] * basisx +
	add		$tmp71 $tmp68 $tmp70 	%line{312} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:314
# 		N_result[2] * basisz ));
	compref		$tmp72 ___369_N_result $const4 	%line{314} %argrw{"wrr"}
	mul		$tmp73 $tmp72 ___369_basisz 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:313
# 		N_result[1] * basisy +
	add		$tmp74 $tmp71 $tmp73 	%line{313} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:311
# 	N_result = normalize(normal(
	assign		$tmp66 $tmp74 	%line{311} %argrw{"wr"}
	normalize	___369_N_result $tmp66 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:316
# 	if( N_result == normal(0) )
	eq		$tmp76 ___369_N_result $const15 	%line{316} %argrw{"wrr"}
	if		$tmp76 115 115 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:317
# 		return i_N;
	assign		Nn_base Nn 	%line{317} %argrw{"wr"}
	return
# W:/r2d2\src\osl_shaders\material_common.h:319
# 	return N_result;
	assign		Nn_base ___369_N_result 	%line{319} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:96
# 	vector In = normalize(I);
	normalize	In I 	%filename{"../../osl_shaders/dlSkin.osl"} %line{96} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:98
# 	float __is_subsurface_ray = raytype("subsurface");
	raytype		$tmp77 $const16 	%line{98} %argrw{"wr"}
	assign		__is_subsurface_ray $tmp77 	%argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:104
# 			spline( "catmull-rom", skin_color[0], diffuse_remap_data),
	compref		$tmp79 skin_color $const1 	%line{104} %argrw{"wrr"}
	spline		$tmp78 $const17 $tmp79 diffuse_remap_data 	%argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:105
# 			spline( "catmull-rom", skin_color[1], diffuse_remap_data),
	compref		$tmp81 skin_color $const2 	%line{105} %argrw{"wrr"}
	spline		$tmp80 $const17 $tmp81 diffuse_remap_data 	%argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:106
# 			spline( "catmull-rom", skin_color[2], diffuse_remap_data) );
	compref		$tmp83 skin_color $const4 	%line{106} %argrw{"wrr"}
	spline		$tmp82 $const17 $tmp83 diffuse_remap_data 	%argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:103
# 		color(
	color		diffuse_color $tmp78 $tmp80 $tmp82 	%line{103} %argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:109
# 	if( __is_subsurface_ray != 0 )
	neq		$tmp84 __is_subsurface_ray $const1 	%line{109} %argrw{"wrr"}
	if		$tmp84 129 140 	%argrw{"r"}
# ../../osl_shaders/dlSkin.osl:111
# 		c_diffuse = oren_nayar(Nn_base, roughness);
	closure		c_diffuse $const18 Nn_base roughness 	%line{111} %argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:115
# 		color sss_skin_color = clamp(diffuse_color, 0.01, 0.95);
	assign		$tmp85 $const19 	%line{115} %argrw{"wr"}
	assign		$tmp86 $const20 	%argrw{"wr"}
	functioncall	$const6 134 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:162
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp87 diffuse_color $tmp86 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{162} %argrw{"wrr"}
	max		___392_sss_skin_color $tmp87 $tmp85 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:116
# 		diffuse_color = 1;
	assign		diffuse_color $const2 	%filename{"../../osl_shaders/dlSkin.osl"} %line{116} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:122
# 		color mfp = sss_color * sss_scale;
	mul		___392_mfp sss_color sss_scale 	%line{122} %argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:123
# 		mfp = max( mfp, 5*EPSILON );
	mul		$tmp88 $const23 $const22 	%line{123} %argrw{"wrr"}
	assign		$tmp89 $tmp88 	%argrw{"wr"}
	max		___392_mfp ___392_mfp $tmp89 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:124
# 		c_diffuse = subsurface(sss_ior, 0, mfp, sss_skin_color);
	closure		c_diffuse $const16 sss_ior $const24 ___392_mfp ___392_sss_skin_color 	%line{124} %argrw{"wrrrrr"}
# ../../osl_shaders/dlSkin.osl:128
# 	closure color c_reflect = 0;
	assign		c_reflect $const1 	%line{128} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:129
# 	color _reflect_color = 0;
	assign		_reflect_color $const1 	%line{129} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:131
# 	if( specular_level > 0 && __is_subsurface_ray == 0 )
	gt		$tmp90 specular_level $const1 	%line{131} %argrw{"wrr"}
	neq		$tmp91 $tmp90 $const1 	%argrw{"wrr"}
	if		$tmp91 148 148 	%argrw{"r"}
	eq		$tmp92 __is_subsurface_ray $const1 	%argrw{"wrr"}
	neq		$tmp93 $tmp92 $const1 	%argrw{"wrr"}
	assign		$tmp91 $tmp93 	%argrw{"wr"}
	if		$tmp91 213 213 	%argrw{"r"}
# ../../osl_shaders/dlSkin.osl:133
# 		float reflect_ior = EtaFromIntensity( specular_level * 0.08 );
	mul		$tmp94 specular_level $const25 	%line{133} %argrw{"wrr"}
	functioncall	$const26 159 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:171
# 	if( x >= 1 )
	ge		$tmp95 $tmp94 $const2 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{171} %argrw{"wrr"}
	if		$tmp95 155 155 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:174
# 		return 500;
	assign		___393_reflect_ior $const27 	%line{174} %argrw{"wr"}
	return
# W:/r2d2\src\osl_shaders\material_common.h:177
# 	float T = sqrt( x );
	sqrt		___365_T $tmp94 	%line{177} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:178
# 	return (T+1) / (1-T);
	add		$tmp96 ___365_T $const28 	%line{178} %argrw{"wrr"}
	sub		$tmp97 $const28 ___365_T 	%argrw{"wrr"}
	div		___393_reflect_ior $tmp96 $tmp97 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:136
# 							reflect_ior, 0, 1, dot(-In, Nn_base) );
	neg		$tmp100 In 	%filename{"../../osl_shaders/dlSkin.osl"} %line{136} %argrw{"wr"}
	dot		$tmp99 $tmp100 Nn_base 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:135
# 		_reflect_color = Fresnel_DieletricConductor(
	functioncall	$const29 206 	%line{135} %argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:113
# 	float cos_theta = i_cos_theta;
	assign		___362_cos_theta $tmp99 	%filename{"W:/r2d2\src\osl_shaders\material_common.h"} %line{113} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:115
# 	if( cos_theta >= 0 )
	ge		$tmp101 ___362_cos_theta $const1 	%line{115} %argrw{"wrr"}
	if		$tmp101 167 170 	%argrw{"r"}
# W:/r2d2\src\osl_shaders\material_common.h:117
# 		n = i_n;
	assign		___362_n ___393_reflect_ior 	%line{117} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:118
# 		ni = i_ni;
	assign		___362_ni $const28 	%line{118} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:122
# 		n = i_ni;
	assign		___362_n $const28 	%line{122} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:123
# 		ni = i_n;
	assign		___362_ni ___393_reflect_ior 	%line{123} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:125
# 		cos_theta = -cos_theta;
	neg		___362_cos_theta ___362_cos_theta 	%line{125} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:128
# 	float cos2_theta = cos_theta * cos_theta;
	mul		___362_cos2_theta ___362_cos_theta ___362_cos_theta 	%line{128} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:129
# 	float sin2_theta = 1 - cos2_theta;
	sub		___362_sin2_theta $const28 ___362_cos2_theta 	%line{129} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:130
# 	float n2 = n * n;
	mul		___362_n2 ___362_n ___362_n 	%line{130} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:131
# 	float ni2 = ni * ni;
	mul		___362_ni2 ___362_ni ___362_ni 	%line{131} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:133
# 	float t0 = n2 - i_k2 - ni2 * sin2_theta;
	sub		$tmp102 ___362_n2 $const24 	%line{133} %argrw{"wrr"}
	mul		$tmp103 ___362_ni2 ___362_sin2_theta 	%argrw{"wrr"}
	sub		___362_t0 $tmp102 $tmp103 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:134
# 	float t1 = sqrt( t0 * t0 + 4 * n2 * i_k2 );
	mul		$tmp104 ___362_t0 ___362_t0 	%line{134} %argrw{"wrr"}
	mul		$tmp105 $const31 ___362_n2 	%argrw{"wrr"}
	mul		$tmp106 $tmp105 $const24 	%argrw{"wrr"}
	add		$tmp107 $tmp104 $tmp106 	%argrw{"wrr"}
	sqrt		___362_t1 $tmp107 	%argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:135
# 	float a2plusb2 = t1 / ni2;
	div		___362_a2plusb2 ___362_t1 ___362_ni2 	%line{135} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:136
# 	float a2 = ( t1 + t0 ) / ( 2 * ni2 );
	add		$tmp108 ___362_t1 ___362_t0 	%line{136} %argrw{"wrr"}
	mul		$tmp109 $const32 ___362_ni2 	%argrw{"wrr"}
	div		___362_a2 $tmp108 $tmp109 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:137
# 	float b2 = ( t1 - t0 ) / ( 2 * ni2 );
	sub		$tmp110 ___362_t1 ___362_t0 	%line{137} %argrw{"wrr"}
	mul		$tmp111 $const32 ___362_ni2 	%argrw{"wrr"}
	div		___362_b2 $tmp110 $tmp111 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:138
# 	float a = sqrt( a2 );
	sqrt		___362_a ___362_a2 	%line{138} %argrw{"wr"}
# W:/r2d2\src\osl_shaders\material_common.h:140
# 	float t2 = a2plusb2 + cos2_theta;
	add		___362_t2 ___362_a2plusb2 ___362_cos2_theta 	%line{140} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:141
# 	float t3 = 2 * a * cos_theta;
	mul		$tmp112 $const32 ___362_a 	%line{141} %argrw{"wrr"}
	mul		___362_t3 $tmp112 ___362_cos_theta 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:142
# 	float R_s = (t2 - t3) / (t2 + t3);
	sub		$tmp113 ___362_t2 ___362_t3 	%line{142} %argrw{"wrr"}
	add		$tmp114 ___362_t2 ___362_t3 	%argrw{"wrr"}
	div		___362_R_s $tmp113 $tmp114 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:144
# 	float t4 = cos2_theta * a2plusb2 + sin2_theta * sin2_theta;
	mul		$tmp115 ___362_cos2_theta ___362_a2plusb2 	%line{144} %argrw{"wrr"}
	mul		$tmp116 ___362_sin2_theta ___362_sin2_theta 	%argrw{"wrr"}
	add		___362_t4 $tmp115 $tmp116 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:145
# 	float t5 = t3 * sin2_theta;
	mul		___362_t5 ___362_t3 ___362_sin2_theta 	%line{145} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:146
# 	float R_p = R_s * (t4 - t5) / (t4 + t5);
	sub		$tmp117 ___362_t4 ___362_t5 	%line{146} %argrw{"wrr"}
	mul		$tmp118 ___362_R_s $tmp117 	%argrw{"wrr"}
	add		$tmp119 ___362_t4 ___362_t5 	%argrw{"wrr"}
	div		___362_R_p $tmp118 $tmp119 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\material_common.h:148
# 	return 0.5 * (R_p + R_s);
	add		$tmp120 ___362_R_p ___362_R_s 	%line{148} %argrw{"wrr"}
	mul		$tmp98 $const33 $tmp120 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:135
# 		_reflect_color = Fresnel_DieletricConductor(
	assign		_reflect_color $tmp98 	%filename{"../../osl_shaders/dlSkin.osl"} %line{135} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:141
# 		_reflect_color *= smoothstep(0, 0.05, specular_level);
	smoothstep	$tmp121 $const24 $const34 specular_level 	%line{141} %argrw{"wrrr"}
	mul		_reflect_color _reflect_color $tmp121 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:144
# 			microfacet(
	assign		$tmp122 $const24 	%line{144} %argrw{"wr"}
# ../../osl_shaders/dlSkin.osl:148
# 					roughness * roughness, roughness * roughness,
	mul		$tmp123 roughness roughness 	%line{148} %argrw{"wrr"}
	mul		$tmp124 roughness roughness 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:144
# 			microfacet(
	closure		c_reflect $const36 $const35 Nn_base $tmp122 $tmp123 $tmp124 ___393_reflect_ior $const1 	%line{144} %argrw{"wrrrrrrrr"}
# ../../osl_shaders/dlSkin.osl:154
# 		1 - CIEluminance(_reflect_color);
	functioncall	$const37 222 	%line{154} %argrw{"r"}
# W:/r2d2\src\osl_shaders\utils.h:62
# 		i_color[0] * 0.212671 +
	compref		$tmp126 _reflect_color $const1 	%filename{"W:/r2d2\src\osl_shaders\utils.h"} %line{62} %argrw{"wrr"}
	mul		$tmp127 $tmp126 $const38 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:63
# 		i_color[1] * 0.715160 +
	compref		$tmp128 _reflect_color $const2 	%line{63} %argrw{"wrr"}
	mul		$tmp129 $tmp128 $const39 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:62
# 		i_color[0] * 0.212671 +
	add		$tmp130 $tmp127 $tmp129 	%line{62} %argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:64
# 		i_color[2] * 0.072169;
	compref		$tmp131 _reflect_color $const4 	%line{64} %argrw{"wrr"}
	mul		$tmp132 $tmp131 $const40 	%argrw{"wrr"}
# W:/r2d2\src\osl_shaders\utils.h:63
# 		i_color[1] * 0.715160 +
	add		$tmp125 $tmp130 $tmp132 	%line{63} %argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:154
# 		1 - CIEluminance(_reflect_color);
	sub		$tmp133 $const28 $tmp125 	%filename{"../../osl_shaders/dlSkin.osl"} %line{154} %argrw{"wrr"}
	mul		diffuse_color diffuse_color $tmp133 	%argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:159
# 				c_diffuse * diffuse_color );
	mul		$tmp134 c_diffuse diffuse_color 	%line{159} %argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:157
# 		outputvariable(
	closure		aov_diffuse $const41 $const16 $tmp134 	%line{157} %argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:164
# 				c_reflect * _reflect_color );
	mul		$tmp135 c_reflect _reflect_color 	%line{164} %argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:162
# 		outputvariable(
	closure		aov_reflection $const41 $const42 $tmp135 	%line{162} %argrw{"wrrr"}
# ../../osl_shaders/dlSkin.osl:167
# 		aov_diffuse +
	add		outColor aov_diffuse aov_reflection 	%line{167} %argrw{"wrr"}
# ../../osl_shaders/dlSkin.osl:170
# 	Ci = outColor;
	assign		Ci outColor 	%line{170} %argrw{"wr"}
	end
