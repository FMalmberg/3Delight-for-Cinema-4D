OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0dev
# options: -q -o ..\build\win64-x64-release-free\2016.5\..\osl\dlColorCorrection.oso -I../../osl_shaders
shader dlColorCorrection
param	color	input	1 1 1		%meta{string,label,"Input"} %meta{string,attribute,"color"}  %read{0,58} %write{2147483647,-1}
param	float	mask	1		%meta{string,label,"Mask"}  %read{58,58} %write{2147483647,-1}
param	float	gamma	1		%meta{string,label,"Gamma"} %meta{string,page,"Color Correction"}  %read{1,3} %write{2147483647,-1}
param	float	hueShift	0		%meta{string,label,"Hue Shift"} %meta{string,page,"Color Correction"}  %read{5,19} %write{2147483647,-1}
param	float	saturation	1		%meta{string,label,"Saturation"} %meta{string,page,"Color Correction"}  %read{8,22} %write{2147483647,-1}
param	float	vibrance	1		%meta{string,label,"Vibrance"} %meta{string,page,"Color Correction"}  %read{13,31} %write{2147483647,-1}
param	float	contrast	1		%meta{string,label,"Contrast"} %meta{string,page,"Color Correction"}  %read{40,43} %write{2147483647,-1}
param	float	contrastPivot	0.180000007		%meta{string,label,"Contrast Pivot"} %meta{string,page,"Color Correction"} %meta{string,lock_left,"contrast"} %meta{string,lock_op,"equalTo"} %meta{float,lock_right,1}  %read{42,44} %write{2147483647,-1}
param	float	exposure	0		%meta{string,label,"Exposure"} %meta{string,page,"Color Correction"}  %read{45,47} %write{2147483647,-1}
param	color	gain	1 1 1		%meta{string,label,"Gain"} %meta{string,page,"Color Correction"}  %read{49,49} %write{2147483647,-1}
param	color	offset	0 0 0		%meta{string,label,"Offset"} %meta{string,page,"Color Correction"}  %read{50,50} %write{2147483647,-1}
param	int	invert	0		%meta{string,label,"Invert"} %meta{string,page,"Color Correction"}  %read{51,51} %write{2147483647,-1}
oparam	color	outColor	0 0 0		%read{4,61} %write{0,58}
oparam	float	outColorR	0		%meta{string,attribute,"outColorR"}  %read{2147483647,-1} %write{59,59}
oparam	float	outColorG	0		%meta{string,attribute,"outColorG"}  %read{2147483647,-1} %write{60,60}
oparam	float	outColorB	0		%meta{string,attribute,"outColorB"}  %read{2147483647,-1} %write{61,61}
local	color	___356_hsv	%read{18,39} %write{17,38}
local	float	___356_vibrance_scale	%read{32,32} %write{28,28}
const	int	$const1	0		%read{1,59} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	float	$const2	1		%read{3,57} %write{2147483647,-1}
temp	float	$tmp2	%read{4,4} %write{3,3}
const	float	$const3	0		%read{5,52} %write{2147483647,-1}
temp	int	$tmp3	%read{6,6} %write{5,5}
temp	int	$tmp4	%read{7,11} %write{6,10}
temp	int	$tmp5	%read{9,9} %write{8,8}
temp	int	$tmp6	%read{10,10} %write{9,9}
temp	int	$tmp7	%read{12,16} %write{11,15}
temp	int	$tmp8	%read{14,14} %write{13,13}
temp	int	$tmp9	%read{15,15} %write{14,14}
const	string	$const4	"rgb"		%read{17,39} %write{2147483647,-1}
const	string	$const5	"hsv"		%read{17,39} %write{2147483647,-1}
temp	float	$tmp10	%read{19,19} %write{18,18}
temp	float	$tmp11	%read{20,20} %write{19,19}
const	int	$const6	1		%read{21,60} %write{2147483647,-1}
temp	float	$tmp12	%read{22,22} %write{21,21}
temp	float	$tmp13	%read{23,23} %write{22,22}
temp	float	$tmp14	%read{26,26} %write{25,25}
const	float	$const7	0.5		%read{25,25} %write{2147483647,-1}
const	float	$const8	0.75		%read{25,25} %write{2147483647,-1}
temp	float	$tmp15	%read{25,25} %write{24,24}
const	float	$const9	0.949999988		%read{26,26} %write{2147483647,-1}
temp	float	$tmp16	%read{27,27} %write{26,26}
temp	float	$tmp17	%read{28,28} %write{27,27}
const	float	$const10	0.0500000007		%read{28,28} %write{2147483647,-1}
temp	float	$tmp18	%read{33,33} %write{32,32}
temp	float	$tmp19	%read{32,32} %write{29,29}
temp	float	$tmp20	%read{31,31} %write{30,30}
temp	float	$tmp21	%read{32,32} %write{31,31}
temp	float	$tmp22	%read{38,38} %write{37,37}
temp	float	$tmp23	%read{36,36} %write{34,34}
const	string	$const11	"clamp"		%read{35,54} %write{2147483647,-1}
temp	float	$tmp24	%read{37,37} %write{36,36}
temp	int	$tmp25	%read{41,41} %write{40,40}
temp	color	$tmp26	%read{43,43} %write{42,42}
temp	color	$tmp27	%read{44,44} %write{43,43}
temp	int	$tmp28	%read{46,46} %write{45,45}
temp	float	$tmp29	%read{48,48} %write{47,47}
const	int	$const12	2		%read{61,61} %write{2147483647,-1}
const	float	$const13	2		%read{47,47} %write{2147483647,-1}
temp	color	$tmp30	%read{57,57} %write{56,56}
temp	color	$tmp31	%read{56,56} %write{52,52}
temp	color	$tmp32	%read{55,55} %write{53,53}
temp	color	$tmp33	%read{56,56} %write{55,55}
code ___main___
# ../../osl_shaders/dlColorCorrection.osl:49
# 	outColor = input;
	assign		outColor input 	%filename{"../../osl_shaders/dlColorCorrection.osl"} %line{49} %argrw{"wr"}
# ../../osl_shaders/dlColorCorrection.osl:51
# 	if( gamma > 0 )
	gt		$tmp1 gamma $const1 	%line{51} %argrw{"wrr"}
	if		$tmp1 5 5 	%argrw{"r"}
# ../../osl_shaders/dlColorCorrection.osl:53
# 		outColor = pow( outColor, 1.0/gamma);
	div		$tmp2 $const2 gamma 	%line{53} %argrw{"wrr"}
	pow		outColor outColor $tmp2 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:56
# 	if( hueShift != 0.0 || saturation != 1.0 || vibrance != 1.0 )
	neq		$tmp3 hueShift $const3 	%line{56} %argrw{"wrr"}
	neq		$tmp4 $tmp3 $const1 	%argrw{"wrr"}
	if		$tmp4 8 11 	%argrw{"r"}
	neq		$tmp5 saturation $const2 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const1 	%argrw{"wrr"}
	assign		$tmp4 $tmp6 	%argrw{"wr"}
	neq		$tmp7 $tmp4 $const1 	%argrw{"wrr"}
	if		$tmp7 13 16 	%argrw{"r"}
	neq		$tmp8 vibrance $const2 	%argrw{"wrr"}
	neq		$tmp9 $tmp8 $const1 	%argrw{"wrr"}
	assign		$tmp7 $tmp9 	%argrw{"wr"}
	if		$tmp7 40 40 	%argrw{"r"}
# ../../osl_shaders/dlColorCorrection.osl:58
# 		color hsv = transformc( "rgb", "hsv", outColor );
	transformc	___356_hsv $const4 $const5 outColor 	%line{58} %argrw{"wrrr"}
# ../../osl_shaders/dlColorCorrection.osl:59
# 		hsv[0] += hueShift;
	compref		$tmp10 ___356_hsv $const1 	%line{59} %argrw{"wrr"}
	add		$tmp11 $tmp10 hueShift 	%argrw{"wrr"}
	compassign	___356_hsv $const1 $tmp11 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:60
# 		hsv[1] *= saturation;
	compref		$tmp12 ___356_hsv $const6 	%line{60} %argrw{"wrr"}
	mul		$tmp13 $tmp12 saturation 	%argrw{"wrr"}
	compassign	___356_hsv $const6 $tmp13 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:62
# 		float vibrance_scale = (1-smoothstep(0.5,0.75,hsv[1]) * 0.95 + 0.05) ;
	compref		$tmp15 ___356_hsv $const6 	%line{62} %argrw{"wrr"}
	smoothstep	$tmp14 $const7 $const8 $tmp15 	%argrw{"wrrr"}
	mul		$tmp16 $tmp14 $const9 	%argrw{"wrr"}
	sub		$tmp17 $const2 $tmp16 	%argrw{"wrr"}
	add		___356_vibrance_scale $tmp17 $const10 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:63
# 		hsv[1] = mix(hsv[1], hsv[1] * vibrance, vibrance_scale);
	compref		$tmp19 ___356_hsv $const6 	%line{63} %argrw{"wrr"}
	compref		$tmp20 ___356_hsv $const6 	%argrw{"wrr"}
	mul		$tmp21 $tmp20 vibrance 	%argrw{"wrr"}
	mix		$tmp18 $tmp19 $tmp21 ___356_vibrance_scale 	%argrw{"wrrr"}
	compassign	___356_hsv $const6 $tmp18 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:65
# 		hsv[1] = clamp(hsv[1], 0, 1);
	compref		$tmp23 ___356_hsv $const6 	%line{65} %argrw{"wrr"}
	functioncall	$const11 38 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp24 $tmp23 $const2 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{163} %argrw{"wrr"}
	max		$tmp22 $tmp24 $const3 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:65
# 		hsv[1] = clamp(hsv[1], 0, 1);
	compassign	___356_hsv $const6 $tmp22 	%filename{"../../osl_shaders/dlColorCorrection.osl"} %line{65} %argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:66
# 		outColor = transformc ("hsv", "rgb", hsv );
	transformc	outColor $const5 $const4 ___356_hsv 	%line{66} %argrw{"wrrr"}
# ../../osl_shaders/dlColorCorrection.osl:70
# 	if( contrast != 1.0 )
	neq		$tmp25 contrast $const2 	%line{70} %argrw{"wrr"}
	if		$tmp25 45 45 	%argrw{"r"}
# ../../osl_shaders/dlColorCorrection.osl:72
# 		outColor = (outColor - contrastPivot)*contrast + contrastPivot;
	sub		$tmp26 outColor contrastPivot 	%line{72} %argrw{"wrr"}
	mul		$tmp27 $tmp26 contrast 	%argrw{"wrr"}
	add		outColor $tmp27 contrastPivot 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:75
# 	if( exposure != 0.0 )
	neq		$tmp28 exposure $const3 	%line{75} %argrw{"wrr"}
	if		$tmp28 49 49 	%argrw{"r"}
# ../../osl_shaders/dlColorCorrection.osl:77
# 		outColor *= pow(2, exposure );
	pow		$tmp29 $const13 exposure 	%line{77} %argrw{"wrr"}
	mul		outColor outColor $tmp29 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:80
# 	outColor *= gain;
	mul		outColor outColor gain 	%line{80} %argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:81
# 	outColor += offset;
	add		outColor outColor offset 	%line{81} %argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:83
# 	if( invert )
	if		invert 58 58 	%line{83} %argrw{"r"}
# ../../osl_shaders/dlColorCorrection.osl:85
# 	 	outColor = 1-clamp(outColor, 0, 1);
	assign		$tmp31 $const3 	%line{85} %argrw{"wr"}
	assign		$tmp32 $const2 	%argrw{"wr"}
	functioncall	$const11 57 	%argrw{"r"}
# W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h:162
# color  clamp (color x, color minval, color maxval) { return max(min(x,maxval),minval); }
	min		$tmp33 outColor $tmp32 	%filename{"W:/r2d2\src\3delight\win64-x64-release-free\osl\stdosl.h"} %line{162} %argrw{"wrr"}
	max		$tmp30 $tmp33 $tmp31 	%argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:85
# 	 	outColor = 1-clamp(outColor, 0, 1);
	sub		outColor $const2 $tmp30 	%filename{"../../osl_shaders/dlColorCorrection.osl"} %line{85} %argrw{"wrr"}
# ../../osl_shaders/dlColorCorrection.osl:91
# 	outColor = mix( input, outColor, mask );
	mix		outColor input outColor mask 	%line{91} %argrw{"wrrr"}
# ../../osl_shaders/dlColorCorrection.osl:92
# 	ASSIGN_COMPONENTS( outColor );
	compref		outColorR outColor $const1 	%line{92} %argrw{"wrr"}
	compref		outColorG outColor $const6 	%argrw{"wrr"}
	compref		outColorB outColor $const12 	%argrw{"wrr"}
	end
