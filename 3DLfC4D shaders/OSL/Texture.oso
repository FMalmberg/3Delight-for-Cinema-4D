OpenShadingLanguage 1.00
# Compiled by oslc 1.10.0dev
# options: 
shader Texture
param	string	texname	""		%read{4,10} %write{2147483647,-1}
oparam	float	f_out	0		%read{2147483647,-1} %write{23,23}
oparam	color	c_out	0 0 0		%read{13,25} %write{8,16}
oparam	closure color	bsdf_out			%read{2147483647,-1} %write{25,25}
local	float[2]	st	%read{1,7} %write{0,3} %derivs
local	int	___321_nchannels	%read{11,11} %write{9,10}
temp	int	$tmp1	%read{2147483647,-1} %write{0,0}
const	string	$const1	"st"		%read{0,0} %write{2147483647,-1}
const	int	$const2	1		%read{1,19} %write{2147483647,-1}
temp	float	$tmp2	%read{2,2} %write{1,1} %derivs
temp	float	$tmp3	%read{3,3} %write{2,2} %derivs
const	float	$const3	1		%read{2,2} %write{2147483647,-1}
const	string	$const4	""		%read{4,4} %write{2147483647,-1}
temp	int	$tmp4	%read{5,5} %write{4,4}
const	int	$const5	0		%read{6,18} %write{2147483647,-1}
temp	float	$tmp5	%read{8,8} %write{6,6} %derivs
temp	float	$tmp6	%read{8,8} %write{7,7} %derivs
const	int	$const6	3		%read{9,11} %write{2147483647,-1}
temp	int	$tmp7	%read{2147483647,-1} %write{10,10}
const	string	$const7	"channels"		%read{10,10} %write{2147483647,-1}
temp	int	$tmp8	%read{12,12} %write{11,11}
temp	float	$tmp9	%read{14,14} %write{13,13}
temp	float	$tmp10	%read{16,16} %write{15,15}
const	int	$const8	2		%read{16,21} %write{2147483647,-1}
const	string	$const9	"rgb_to_float"		%read{17,17} %write{2147483647,-1}
temp	float	$tmp11	%read{20,20} %write{18,18}
temp	float	$tmp12	%read{20,20} %write{19,19}
temp	float	$tmp13	%read{22,22} %write{20,20}
temp	float	$tmp14	%read{22,22} %write{21,21}
temp	float	$tmp15	%read{23,23} %write{22,22}
const	float	$const10	3		%read{23,23} %write{2147483647,-1}
temp	closure color	$tmp16	%read{25,25} %write{24,24}
const	string	$const11	"emission"		%read{24,24} %write{2147483647,-1}
code ___main___
# Texture.osl:20
# 	getattribute("st",st);
	getattribute	$tmp1 $const1 st 	%filename{"Texture.osl"} %line{20} %argrw{"wrw"}
# Texture.osl:21
# 	st[1]=1-st[1]; //Flip v coordinate to match C4D UV conventions
	aref		$tmp2 st $const2 	%line{21} %argrw{"wrr"}
	sub		$tmp3 $const3 $tmp2 	%argrw{"wrr"}
	aassign		st $const2 $tmp3 	%argrw{"wrr"}
# Texture.osl:22
# 	if(texname!=""){
	neq		$tmp4 texname $const4 	%line{22} %argrw{"wrr"}
	if		$tmp4 26 26 	%argrw{"r"}
# Texture.osl:23
# 		c_out=texture(texname, st[0],st[1]);
	aref		$tmp5 st $const5 	%line{23} %argrw{"wrr"}
	aref		$tmp6 st $const2 	%argrw{"wrr"}
	texture		c_out texname $tmp5 $tmp6 	%argrw{"wrrr"} %argderivs{2,3}
# Texture.osl:25
# 		int nchannels=3;
	assign		___321_nchannels $const6 	%line{25} %argrw{"wr"}
# Texture.osl:26
# 		gettextureinfo (texname, "channels" ,nchannels);
	gettextureinfo	$tmp7 texname $const7 ___321_nchannels 	%line{26} %argrw{"wrrw"}
# Texture.osl:27
# 		if(nchannels<3){
	lt		$tmp8 ___321_nchannels $const6 	%line{27} %argrw{"wrr"}
	if		$tmp8 17 17 	%argrw{"r"}
# Texture.osl:28
# 			c_out[1]=c_out[0];
	compref		$tmp9 c_out $const5 	%line{28} %argrw{"wrr"}
	compassign	c_out $const2 $tmp9 	%argrw{"wrr"}
# Texture.osl:29
# 			c_out[2]=c_out[0];
	compref		$tmp10 c_out $const5 	%line{29} %argrw{"wrr"}
	compassign	c_out $const8 $tmp10 	%argrw{"wrr"}
# Texture.osl:32
# 		f_out=rgb_to_float(c_out);
	functioncall	$const9 24 	%line{32} %argrw{"r"}
# Texture.osl:8
# 	return (c[0]+c[1]+c[2])/3.0;
	compref		$tmp11 c_out $const5 	%line{8} %argrw{"wrr"}
	compref		$tmp12 c_out $const2 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	compref		$tmp14 c_out $const8 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	div		f_out $tmp15 $const10 	%argrw{"wrr"}
# Texture.osl:33
# 		bsdf_out=c_out*emission();
	closure		$tmp16 $const11 	%line{33} %argrw{"wr"}
	mul		bsdf_out $tmp16 c_out 	%argrw{"wrr"}
	end
