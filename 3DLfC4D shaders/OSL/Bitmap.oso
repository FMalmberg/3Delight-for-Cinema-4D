OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0dev
# options: 
shader Bitmap
param	string	_1000	""		%read{27,34} %write{2147483647,-1}
param	float	_2010	0		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	f_out	0		%read{2147483647,-1} %write{47,47}
oparam	color	c_out	0 0 0		%read{37,48} %write{32,40}
oparam	color	outColor	0 0 0		%read{2147483647,-1} %write{48,48}
oparam	float[2]	uvCoord	0 0		%read{29,30} %write{22,26} %derivs
global	vector	I	%read{4,4} %write{2147483647,-1} %derivs
local	int	isSky	%read{2,2} %write{0,1}
local	vector	___322_R	%read{5,15} %write{4,4} %derivs
local	float	___322_signed_s	%read{21,21} %write{9,9} %derivs
local	float	___322_signed_t	%read{23,23} %write{20,20} %derivs
local	int	___324_nchannels	%read{35,35} %write{33,34}
const	int	$const1	0		%read{0,42} %write{2147483647,-1}
temp	int	$tmp1	%read{2147483647,-1} %write{1,1}
const	string	$const2	"IsSkyObject"		%read{1,1} %write{2147483647,-1}
const	int	$const3	1		%read{2,43} %write{2147483647,-1}
temp	int	$tmp2	%read{3,3} %write{2,2}
temp	float	$tmp3	%read{9,9} %write{7,7} %derivs
temp	float	$tmp4	%read{7,7} %write{5,5} %derivs
const	int	$const4	2		%read{6,45} %write{2147483647,-1}
temp	float	$tmp5	%read{7,7} %write{6,6} %derivs
const	float	$const5	3.14159274		%read{8,20} %write{2147483647,-1}
temp	float	$tmp6	%read{9,9} %write{8,8} %derivs
const	float	$const6	2		%read{8,8} %write{2147483647,-1}
temp	float	$tmp7	%read{20,20} %write{19,19} %derivs
temp	float	$tmp8	%read{19,19} %write{10,10} %derivs
temp	float	$tmp9	%read{19,19} %write{18,18} %derivs
temp	float	$tmp10	%read{13,13} %write{11,11} %derivs
temp	float	$tmp11	%read{13,13} %write{12,12} %derivs
temp	float	$tmp12	%read{17,17} %write{13,13} %derivs
temp	float	$tmp13	%read{16,16} %write{14,14} %derivs
temp	float	$tmp14	%read{16,16} %write{15,15} %derivs
temp	float	$tmp15	%read{17,17} %write{16,16} %derivs
temp	float	$tmp16	%read{18,18} %write{17,17} %derivs
const	float	$const7	0.5		%read{21,23} %write{2147483647,-1}
temp	float	$tmp17	%read{22,22} %write{21,21} %derivs
temp	float	$tmp18	%read{24,24} %write{23,23} %derivs
temp	float	$tmp19	%read{25,25} %write{24,24} %derivs
const	float	$const8	1		%read{24,31} %write{2147483647,-1}
temp	int	$tmp20	%read{2147483647,-1} %write{26,26}
const	string	$const9	"st"		%read{26,26} %write{2147483647,-1}
const	string	$const10	""		%read{27,27} %write{2147483647,-1}
temp	int	$tmp21	%read{28,28} %write{27,27}
temp	float	$tmp22	%read{32,32} %write{29,29} %derivs
temp	float	$tmp23	%read{31,31} %write{30,30} %derivs
temp	float	$tmp24	%read{32,32} %write{31,31} %derivs
const	int	$const11	3		%read{33,35} %write{2147483647,-1}
temp	int	$tmp25	%read{2147483647,-1} %write{34,34}
const	string	$const12	"channels"		%read{34,34} %write{2147483647,-1}
temp	int	$tmp26	%read{36,36} %write{35,35}
temp	float	$tmp27	%read{38,38} %write{37,37}
temp	float	$tmp28	%read{40,40} %write{39,39}
const	string	$const13	"rgb_to_float"		%read{41,41} %write{2147483647,-1}
temp	float	$tmp29	%read{44,44} %write{42,42}
temp	float	$tmp30	%read{44,44} %write{43,43}
temp	float	$tmp31	%read{46,46} %write{44,44}
temp	float	$tmp32	%read{46,46} %write{45,45}
temp	float	$tmp33	%read{47,47} %write{46,46}
const	float	$const14	3		%read{47,47} %write{2147483647,-1}
code ___main___
# Bitmap.osl:16
# 	int isSky=0;
	assign		isSky $const1 	%filename{"Bitmap.osl"} %line{16} %argrw{"wr"}
# Bitmap.osl:18
# 	getattribute("IsSkyObject", isSky);
	getattribute	$tmp1 $const2 isSky 	%line{18} %argrw{"wrw"}
# Bitmap.osl:20
# 	if( isSky== 1 )
	eq		$tmp2 isSky $const3 	%line{20} %argrw{"wrr"}
	if		$tmp2 26 27 	%argrw{"r"}
# Bitmap.osl:22
#          vector R = normalize( I );
	normalize	___322_R I 	%line{22} %argrw{"wr"}
# Bitmap.osl:24
#         float signed_s = atan2( R[0], R[2] ) / (2*M_PI);
	compref		$tmp4 ___322_R $const1 	%line{24} %argrw{"wrr"}
	compref		$tmp5 ___322_R $const4 	%argrw{"wrr"}
	atan2		$tmp3 $tmp4 $tmp5 	%argrw{"wrr"}
	mul		$tmp6 $const6 $const5 	%argrw{"wrr"}
	div		___322_signed_s $tmp3 $tmp6 	%argrw{"wrr"}
# Bitmap.osl:25
#         float signed_t = atan2( R[1], sqrt( (R[0]*R[0]) + (R[2]*R[2]) ) ) / M_PI;
	compref		$tmp8 ___322_R $const3 	%line{25} %argrw{"wrr"}
	compref		$tmp10 ___322_R $const1 	%argrw{"wrr"}
	compref		$tmp11 ___322_R $const1 	%argrw{"wrr"}
	mul		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
	compref		$tmp13 ___322_R $const4 	%argrw{"wrr"}
	compref		$tmp14 ___322_R $const4 	%argrw{"wrr"}
	mul		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	add		$tmp16 $tmp12 $tmp15 	%argrw{"wrr"}
	sqrt		$tmp9 $tmp16 	%argrw{"wr"}
	atan2		$tmp7 $tmp8 $tmp9 	%argrw{"wrr"}
	div		___322_signed_t $tmp7 $const5 	%argrw{"wrr"}
# Bitmap.osl:27
#         uvCoord[0] = (signed_s + 0.5);
	add		$tmp17 ___322_signed_s $const7 	%line{27} %argrw{"wrr"}
	aassign		uvCoord $const1 $tmp17 	%argrw{"wrr"}
# Bitmap.osl:28
#         uvCoord[1] = 1-(signed_t + 0.5);
	add		$tmp18 ___322_signed_t $const7 	%line{28} %argrw{"wrr"}
	sub		$tmp19 $const8 $tmp18 	%argrw{"wrr"}
	aassign		uvCoord $const3 $tmp19 	%argrw{"wrr"}
# Bitmap.osl:32
#        getattribute( "st",uvCoord);
	getattribute	$tmp20 $const9 uvCoord 	%line{32} %argrw{"wrw"}
# Bitmap.osl:35
# 	if(_1000!=""){
	neq		$tmp21 _1000 $const10 	%line{35} %argrw{"wrr"}
	if		$tmp21 49 49 	%argrw{"r"}
# Bitmap.osl:36
# 		c_out=texture(_1000, uvCoord[0],1-uvCoord[1]);
	aref		$tmp22 uvCoord $const1 	%line{36} %argrw{"wrr"}
	aref		$tmp23 uvCoord $const3 	%argrw{"wrr"}
	sub		$tmp24 $const8 $tmp23 	%argrw{"wrr"}
	texture		c_out _1000 $tmp22 $tmp24 	%argrw{"wrrr"} %argderivs{2,3}
# Bitmap.osl:38
# 		int nchannels=3;
	assign		___324_nchannels $const11 	%line{38} %argrw{"wr"}
# Bitmap.osl:39
# 		gettextureinfo (_1000, "channels" ,nchannels);
	gettextureinfo	$tmp25 _1000 $const12 ___324_nchannels 	%line{39} %argrw{"wrrw"}
# Bitmap.osl:40
# 		if(nchannels<3){
	lt		$tmp26 ___324_nchannels $const11 	%line{40} %argrw{"wrr"}
	if		$tmp26 41 41 	%argrw{"r"}
# Bitmap.osl:41
# 			c_out[1]=c_out[0];
	compref		$tmp27 c_out $const1 	%line{41} %argrw{"wrr"}
	compassign	c_out $const3 $tmp27 	%argrw{"wrr"}
# Bitmap.osl:42
# 			c_out[2]=c_out[0];
	compref		$tmp28 c_out $const1 	%line{42} %argrw{"wrr"}
	compassign	c_out $const4 $tmp28 	%argrw{"wrr"}
# Bitmap.osl:45
# 		f_out=rgb_to_float(c_out);
	functioncall	$const13 48 	%line{45} %argrw{"r"}
# Bitmap.osl:2
# 	return (c[0]+c[1]+c[2])/3.0;
	compref		$tmp29 c_out $const1 	%line{2} %argrw{"wrr"}
	compref		$tmp30 c_out $const3 	%argrw{"wrr"}
	add		$tmp31 $tmp29 $tmp30 	%argrw{"wrr"}
	compref		$tmp32 c_out $const4 	%argrw{"wrr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
	div		f_out $tmp33 $const14 	%argrw{"wrr"}
# Bitmap.osl:46
# 		outColor=c_out;
	assign		outColor c_out 	%line{46} %argrw{"wr"}
	end
