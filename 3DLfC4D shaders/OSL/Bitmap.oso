OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0dev
# options: 
shader Bitmap
param	string	_1000	""		%read{5,12} %write{2147483647,-1}
param	float	_2010	0		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	f_out	0		%read{2147483647,-1} %write{25,25}
oparam	color	c_out	0 0 0		%read{15,26} %write{10,18}
oparam	color	Cout	0 0 0		%read{2147483647,-1} %write{26,26}
global	float	u	%read{3,3} %write{2147483647,-1} %derivs
global	float	v	%read{4,4} %write{2147483647,-1} %derivs
local	float[2]	st	%read{7,8} %write{0,4} %derivs
local	int	___323_nchannels	%read{13,13} %write{11,12}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const1	"st"		%read{0,0} %write{2147483647,-1}
const	int	$const2	0		%read{1,20} %write{2147483647,-1}
temp	int	$tmp2	%read{2,2} %write{1,1}
const	int	$const3	1		%read{4,21} %write{2147483647,-1}
const	string	$const4	""		%read{5,5} %write{2147483647,-1}
temp	int	$tmp3	%read{6,6} %write{5,5}
temp	float	$tmp4	%read{10,10} %write{7,7} %derivs
temp	float	$tmp5	%read{9,9} %write{8,8} %derivs
temp	float	$tmp6	%read{10,10} %write{9,9} %derivs
const	float	$const5	1		%read{9,9} %write{2147483647,-1}
const	int	$const6	3		%read{11,13} %write{2147483647,-1}
temp	int	$tmp7	%read{2147483647,-1} %write{12,12}
const	string	$const7	"channels"		%read{12,12} %write{2147483647,-1}
temp	int	$tmp8	%read{14,14} %write{13,13}
temp	float	$tmp9	%read{16,16} %write{15,15}
temp	float	$tmp10	%read{18,18} %write{17,17}
const	int	$const8	2		%read{18,23} %write{2147483647,-1}
const	string	$const9	"rgb_to_float"		%read{19,19} %write{2147483647,-1}
temp	float	$tmp11	%read{22,22} %write{20,20}
temp	float	$tmp12	%read{22,22} %write{21,21}
temp	float	$tmp13	%read{24,24} %write{22,22}
temp	float	$tmp14	%read{24,24} %write{23,23}
temp	float	$tmp15	%read{25,25} %write{24,24}
const	float	$const10	3		%read{25,25} %write{2147483647,-1}
code ___main___
# Bitmap.osl:15
# 	if( getattribute("st", st) == 0 )
	getattribute	$tmp1 $const1 st 	%filename{"Bitmap.osl"} %line{15} %argrw{"wrw"}
	eq		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
	if		$tmp2 5 5 	%argrw{"r"}
# Bitmap.osl:18
# 		st[0] = u;
	aassign		st $const2 u 	%line{18} %argrw{"wrr"}
# Bitmap.osl:19
# 		st[1] = v;
	aassign		st $const3 v 	%line{19} %argrw{"wrr"}
# Bitmap.osl:22
# 	if(_1000!=""){
	neq		$tmp3 _1000 $const4 	%line{22} %argrw{"wrr"}
	if		$tmp3 27 27 	%argrw{"r"}
# Bitmap.osl:23
# 		c_out=texture(_1000, st[0],1-st[1]);
	aref		$tmp4 st $const2 	%line{23} %argrw{"wrr"}
	aref		$tmp5 st $const3 	%argrw{"wrr"}
	sub		$tmp6 $const5 $tmp5 	%argrw{"wrr"}
	texture		c_out _1000 $tmp4 $tmp6 	%argrw{"wrrr"} %argderivs{2,3}
# Bitmap.osl:25
# 		int nchannels=3;
	assign		___323_nchannels $const6 	%line{25} %argrw{"wr"}
# Bitmap.osl:26
# 		gettextureinfo (_1000, "channels" ,nchannels);
	gettextureinfo	$tmp7 _1000 $const7 ___323_nchannels 	%line{26} %argrw{"wrrw"}
# Bitmap.osl:27
# 		if(nchannels<3){
	lt		$tmp8 ___323_nchannels $const6 	%line{27} %argrw{"wrr"}
	if		$tmp8 19 19 	%argrw{"r"}
# Bitmap.osl:28
# 			c_out[1]=c_out[0];
	compref		$tmp9 c_out $const2 	%line{28} %argrw{"wrr"}
	compassign	c_out $const3 $tmp9 	%argrw{"wrr"}
# Bitmap.osl:29
# 			c_out[2]=c_out[0];
	compref		$tmp10 c_out $const2 	%line{29} %argrw{"wrr"}
	compassign	c_out $const8 $tmp10 	%argrw{"wrr"}
# Bitmap.osl:32
# 		f_out=rgb_to_float(c_out);
	functioncall	$const9 26 	%line{32} %argrw{"r"}
# Bitmap.osl:2
# 	return (c[0]+c[1]+c[2])/3.0;
	compref		$tmp11 c_out $const2 	%line{2} %argrw{"wrr"}
	compref		$tmp12 c_out $const3 	%argrw{"wrr"}
	add		$tmp13 $tmp11 $tmp12 	%argrw{"wrr"}
	compref		$tmp14 c_out $const8 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
	div		f_out $tmp15 $const10 	%argrw{"wrr"}
# Bitmap.osl:33
# 		Cout=c_out;
	assign		Cout c_out 	%line{33} %argrw{"wr"}
	end
